
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001380  08001380  00011380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800144c  0800144c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  080014bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080014bc  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002878  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000080c  00000000  00000000  0002290a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00023118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00023320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2a  00000000  00000000  000234f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ae7  00000000  00000000  00026222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009cbd  00000000  00000000  00027d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000319c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d68  00000000  00000000  00031a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001368 	.word	0x08001368

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001368 	.word	0x08001368

080001e8 <led_init_all>:
 */

#include <stdint.h>
#include "led.h"

void led_init_all(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	//First turn on the clocks for port D
	uint32_t *pRCC_AHB1ENR = (uint32_t*)0x40023830;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <led_init_all+0x54>)
 80001f0:	607b      	str	r3, [r7, #4]

	*pRCC_AHB1ENR |= (1 << 3);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0208 	orr.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]

	//Next set pins 12-15 of GPIOD to output mode
	uint32_t *pGPIOD_MODER = (uint32_t*)0x40020C00;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <led_init_all+0x58>)
 8000200:	603b      	str	r3, [r7, #0]
	*pGPIOD_MODER &= ~(0xFF000000);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGPIOD_MODER |= (0x55 << 24);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]

	led_off(LED_BLUE);
 800021a:	200f      	movs	r0, #15
 800021c:	f000 f82a 	bl	8000274 <led_off>
	led_off(LED_GREEN);
 8000220:	200c      	movs	r0, #12
 8000222:	f000 f827 	bl	8000274 <led_off>
	led_off(LED_ORANGE);
 8000226:	200d      	movs	r0, #13
 8000228:	f000 f824 	bl	8000274 <led_off>
	led_off(LED_RED);
 800022c:	200e      	movs	r0, #14
 800022e:	f000 f821 	bl	8000274 <led_off>
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40023830 	.word	0x40023830
 8000240:	40020c00 	.word	0x40020c00

08000244 <led_on>:

void led_on(uint8_t led_no) {
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOD_ODR = (uint32_t*)0x40020C14;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <led_on+0x2c>)
 8000250:	60fb      	str	r3, [r7, #12]
	*pGPIOD_ODR |= (1 << led_no);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	2101      	movs	r1, #1
 800025a:	fa01 f202 	lsl.w	r2, r1, r2
 800025e:	431a      	orrs	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	601a      	str	r2, [r3, #0]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020c14 	.word	0x40020c14

08000274 <led_off>:

void led_off(uint8_t led_no) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOD_ODR = (uint32_t*)0x40020C14;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <led_off+0x2c>)
 8000280:	60fb      	str	r3, [r7, #12]
	*pGPIOD_ODR &= ~(1 << led_no);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40020c14 	.word	0x40020c14

080002a4 <main>:
uint32_t g_tick_count;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002a8:	f000 f9a8 	bl	80005fc <enable_processor_faults>

	init_sched_stack(SCHED_STACK_START);
 80002ac:	4807      	ldr	r0, [pc, #28]	; (80002cc <main+0x28>)
 80002ae:	f000 f88b 	bl	80003c8 <init_sched_stack>

	init_tasks_stack();
 80002b2:	f000 f88f 	bl	80003d4 <init_tasks_stack>

	led_init_all();
 80002b6:	f7ff ff97 	bl	80001e8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 f84b 	bl	8000358 <init_systick_timer>

	switch_sp_to_psp();
 80002c2:	f000 f98d 	bl	80005e0 <switch_sp_to_psp>

	task1_handler();
 80002c6:	f000 f803 	bl	80002d0 <task1_handler>

	while(1);
 80002ca:	e7fe      	b.n	80002ca <main+0x26>
 80002cc:	2001ec00 	.word	0x2001ec00

080002d0 <task1_handler>:
}

void task1_handler(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_BLUE);
 80002d4:	200f      	movs	r0, #15
 80002d6:	f7ff ffb5 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_250MS);
		task_delay(250);
 80002da:	20fa      	movs	r0, #250	; 0xfa
 80002dc:	f000 f9ca 	bl	8000674 <task_delay>
		led_off(LED_BLUE);
 80002e0:	200f      	movs	r0, #15
 80002e2:	f7ff ffc7 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_250MS);
		task_delay(250);
 80002e6:	20fa      	movs	r0, #250	; 0xfa
 80002e8:	f000 f9c4 	bl	8000674 <task_delay>
		led_on(LED_BLUE);
 80002ec:	e7f2      	b.n	80002d4 <task1_handler+0x4>

080002ee <task2_handler>:
	}
}
void task2_handler(void) {
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_GREEN);
 80002f2:	200c      	movs	r0, #12
 80002f4:	f7ff ffa6 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_1S);
		task_delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 f9ba 	bl	8000674 <task_delay>
		led_off(LED_GREEN);
 8000300:	200c      	movs	r0, #12
 8000302:	f7ff ffb7 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_1S);
		task_delay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 f9b3 	bl	8000674 <task_delay>
		led_on(LED_GREEN);
 800030e:	e7f0      	b.n	80002f2 <task2_handler+0x4>

08000310 <task3_handler>:
	}
}
void task3_handler(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_ORANGE);
 8000314:	200d      	movs	r0, #13
 8000316:	f7ff ff95 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_500MS);
		task_delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031e:	f000 f9a9 	bl	8000674 <task_delay>
		led_off(LED_ORANGE);
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff ffa6 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_500MS);
		task_delay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f9a2 	bl	8000674 <task_delay>
		led_on(LED_ORANGE);
 8000330:	e7f0      	b.n	8000314 <task3_handler+0x4>

08000332 <task4_handler>:
	}
}
void task4_handler(void) {
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_RED);
 8000336:	200e      	movs	r0, #14
 8000338:	f7ff ff84 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_125MS);
		task_delay(125);
 800033c:	207d      	movs	r0, #125	; 0x7d
 800033e:	f000 f999 	bl	8000674 <task_delay>
		led_off(LED_RED);
 8000342:	200e      	movs	r0, #14
 8000344:	f7ff ff96 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_125MS);
		task_delay(125);
 8000348:	207d      	movs	r0, #125	; 0x7d
 800034a:	f000 f993 	bl	8000674 <task_delay>
		led_on(LED_RED);
 800034e:	e7f2      	b.n	8000336 <task4_handler+0x4>

08000350 <idle_task_handler>:
	}
}

void idle_task_handler(void) {
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	while(1);
 8000354:	e7fe      	b.n	8000354 <idle_task_handler+0x4>
	...

08000358 <init_systick_timer>:
}

void init_systick_timer(uint32_t tick_hz) {
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <init_systick_timer+0x64>)
 8000362:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <init_systick_timer+0x68>)
 8000366:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz - 1;
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <init_systick_timer+0x6c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	3b01      	subs	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]

	//Clear SRVR
	*pSRVR &= ~(0x00FFFFFF);
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]

	//load count into SRVR
	*pSRVR |= count_value;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	431a      	orrs	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	601a      	str	r2, [r3, #0]

	//initializations
	*pSCSR |= (1 << 1); //Enables Systick exception
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f043 0202 	orr.w	r2, r3, #2
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Uses processor clock as source
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f043 0204 	orr.w	r2, r3, #4
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	601a      	str	r2, [r3, #0]

	//enable the timer
	*pSCSR |= (1 << 0);
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f043 0201 	orr.w	r2, r3, #1
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000e014 	.word	0xe000e014
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	00f42400 	.word	0x00f42400

080003c8 <init_sched_stack>:

__attribute__((naked)) void init_sched_stack(uint32_t sched_stack_start) {
 80003c8:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_stack_start) : );
 80003ca:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003ce:	4770      	bx	lr
}
 80003d0:	bf00      	nop
	...

080003d4 <init_tasks_stack>:

void init_tasks_stack(void) {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	user_tasks[0].psp_value = IDLE_STACK_START;
 80003da:	4b3f      	ldr	r3, [pc, #252]	; (80004d8 <init_tasks_stack+0x104>)
 80003dc:	4a3f      	ldr	r2, [pc, #252]	; (80004dc <init_tasks_stack+0x108>)
 80003de:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80003e0:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <init_tasks_stack+0x104>)
 80003e2:	4a3f      	ldr	r2, [pc, #252]	; (80004e0 <init_tasks_stack+0x10c>)
 80003e4:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80003e6:	4b3c      	ldr	r3, [pc, #240]	; (80004d8 <init_tasks_stack+0x104>)
 80003e8:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <init_tasks_stack+0x110>)
 80003ea:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80003ec:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <init_tasks_stack+0x104>)
 80003ee:	4a3e      	ldr	r2, [pc, #248]	; (80004e8 <init_tasks_stack+0x114>)
 80003f0:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80003f2:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <init_tasks_stack+0x104>)
 80003f4:	4a3d      	ldr	r2, [pc, #244]	; (80004ec <init_tasks_stack+0x118>)
 80003f6:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task_handler;
 80003f8:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <init_tasks_stack+0x104>)
 80003fa:	4a3d      	ldr	r2, [pc, #244]	; (80004f0 <init_tasks_stack+0x11c>)
 80003fc:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80003fe:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <init_tasks_stack+0x104>)
 8000400:	4a3c      	ldr	r2, [pc, #240]	; (80004f4 <init_tasks_stack+0x120>)
 8000402:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000404:	4b34      	ldr	r3, [pc, #208]	; (80004d8 <init_tasks_stack+0x104>)
 8000406:	4a3c      	ldr	r2, [pc, #240]	; (80004f8 <init_tasks_stack+0x124>)
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800040a:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <init_tasks_stack+0x104>)
 800040c:	4a3b      	ldr	r2, [pc, #236]	; (80004fc <init_tasks_stack+0x128>)
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <init_tasks_stack+0x104>)
 8000412:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <init_tasks_stack+0x12c>)
 8000414:	64da      	str	r2, [r3, #76]	; 0x4c

	user_tasks[0].current_state = TASK_READY_STATE;
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <init_tasks_stack+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 800041c:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <init_tasks_stack+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <init_tasks_stack+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <init_tasks_stack+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <init_tasks_stack+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].sleep_count = 0;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <init_tasks_stack+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
	user_tasks[1].sleep_count = 0;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <init_tasks_stack+0x104>)
 8000442:	2200      	movs	r2, #0
 8000444:	615a      	str	r2, [r3, #20]
	user_tasks[2].sleep_count = 0;
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <init_tasks_stack+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
	user_tasks[3].sleep_count = 0;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <init_tasks_stack+0x104>)
 800044e:	2200      	movs	r2, #0
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
	user_tasks[4].sleep_count = 0;
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <init_tasks_stack+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	; 0x44

	for(int i = 0; i < MAX_TASKS; i++) {
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	e033      	b.n	80004c6 <init_tasks_stack+0xf2>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800045e:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <init_tasks_stack+0x104>)
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	011b      	lsls	r3, r3, #4
 8000464:	4413      	add	r3, r2
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]

		pPSP--; //XPSR
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	3b04      	subs	r3, #4
 800046e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000 to have thumb state enabled.
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000476:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3b04      	subs	r3, #4
 800047c:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <init_tasks_stack+0x104>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	4413      	add	r3, r2
 8000486:	330c      	adds	r3, #12
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b04      	subs	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
		//*pPSP = 0xFFFFFFFD; //This LR is to tell the processor to unstack using the PSP and use the PSP for thread mode.
		*pPSP = 0; //Actually it doesn't matter what the LR is since its already EXC_RETURN on exception entry.
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++) {
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e005      	b.n	80004ae <init_tasks_stack+0xda>
			pPSP--;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3b04      	subs	r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
		for(int j = 0; j < 13; j++) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3301      	adds	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b0c      	cmp	r3, #12
 80004b2:	ddf6      	ble.n	80004a2 <init_tasks_stack+0xce>
			//*pPSP = 0;
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	4908      	ldr	r1, [pc, #32]	; (80004d8 <init_tasks_stack+0x104>)
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	440b      	add	r3, r1
 80004be:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++) {
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3301      	adds	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	ddc8      	ble.n	800045e <init_tasks_stack+0x8a>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000094 	.word	0x20000094
 80004dc:	2001f000 	.word	0x2001f000
 80004e0:	20020000 	.word	0x20020000
 80004e4:	2001fc00 	.word	0x2001fc00
 80004e8:	2001f800 	.word	0x2001f800
 80004ec:	2001f400 	.word	0x2001f400
 80004f0:	08000351 	.word	0x08000351
 80004f4:	080002d1 	.word	0x080002d1
 80004f8:	080002ef 	.word	0x080002ef
 80004fc:	08000311 	.word	0x08000311
 8000500:	08000333 	.word	0x08000333

08000504 <get_current_psp>:

uint32_t get_current_psp(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <get_current_psp+0x18>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <get_current_psp+0x1c>)
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	4413      	add	r3, r2
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000000 	.word	0x20000000
 8000520:	20000094 	.word	0x20000094

08000524 <update_current_psp>:

void update_current_psp(uint32_t current_psp) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <update_current_psp+0x20>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <update_current_psp+0x24>)
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	20000000 	.word	0x20000000
 8000548:	20000094 	.word	0x20000094

0800054c <update_current_task>:

void update_current_task(void) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	current_task++;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <update_current_task+0x88>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <update_current_task+0x88>)
 800055a:	6013      	str	r3, [r2, #0]
	current_task %= MAX_TASKS;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <update_current_task+0x88>)
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <update_current_task+0x8c>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	089a      	lsrs	r2, r3, #2
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	1aca      	subs	r2, r1, r3
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <update_current_task+0x88>)
 8000572:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < MAX_TASKS + 1; i++) {
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	e020      	b.n	80005bc <update_current_task+0x70>
		if((user_tasks[current_task].current_state == TASK_READY_STATE) && (current_task != 0)){
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <update_current_task+0x88>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <update_current_task+0x90>)
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	4413      	add	r3, r2
 8000584:	3308      	adds	r3, #8
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d103      	bne.n	8000594 <update_current_task+0x48>
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <update_current_task+0x88>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d11a      	bne.n	80005ca <update_current_task+0x7e>
			return;
		}
		current_task++;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <update_current_task+0x88>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <update_current_task+0x88>)
 800059c:	6013      	str	r3, [r2, #0]
		current_task %= MAX_TASKS;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <update_current_task+0x88>)
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <update_current_task+0x8c>)
 80005a4:	fba3 2301 	umull	r2, r3, r3, r1
 80005a8:	089a      	lsrs	r2, r3, #2
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	1aca      	subs	r2, r1, r3
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <update_current_task+0x88>)
 80005b4:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASKS + 1; i++) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b05      	cmp	r3, #5
 80005c0:	d9db      	bls.n	800057a <update_current_task+0x2e>
	}

	current_task = 0;
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <update_current_task+0x88>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e000      	b.n	80005cc <update_current_task+0x80>
			return;
 80005ca:	bf00      	nop
}
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000000 	.word	0x20000000
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	20000094 	.word	0x20000094

080005e0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void) {
	//First save the current LR to go back to main
	__asm volatile("PUSH {LR}");
 80005e0:	b500      	push	{lr}

	//Get the current task's PSP and initialize the PSP register with it
	__asm volatile("BL get_current_psp");
 80005e2:	f7ff ff8f 	bl	8000504 <get_current_psp>
	__asm volatile("MSR PSP, R0");
 80005e6:	f380 8809 	msr	PSP, r0

	//Restore LR
	__asm volatile("POP {LR}");
 80005ea:	f85d eb04 	ldr.w	lr, [sp], #4

	//Next modify bit 1 in the CONTROL register to use PSP for tasks instead of the default MSP
	__asm volatile("MOV R0, #0x000002");
 80005ee:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80005f2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80005f6:	4770      	bx	lr
}
 80005f8:	bf00      	nop
	...

080005fc <enable_processor_faults>:

void enable_processor_faults(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <enable_processor_faults+0x38>)
 8000604:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16 ); //mem manage
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ); //bus fault
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ); //usage fault
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	e000ed24 	.word	0xe000ed24

08000638 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	update_global_tick();
 800063c:	f000 f880 	bl	8000740 <update_global_tick>
	unblock_tasks();
 8000640:	f000 f84e 	bl	80006e0 <unblock_tasks>
	task_yield();
 8000644:	f000 f83a 	bl	80006bc <task_yield>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void) {
	//Save the EXC_RETURN since we will be branching to multiple sub-routines
	__asm volatile("PUSH {LR}");
 800064c:	b500      	push	{lr}
	//First obtain current PSP, since we can't use PUSH/POP as handler mode only uses MSP
	__asm volatile("MRS R0, PSP");
 800064e:	f3ef 8009 	mrs	r0, PSP
	//Then stack the rest of the context, R4-R11 using PSP which is located in R0
	__asm volatile("STMDB R0!, {R4-R11}");
 8000652:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Save this PSP
	__asm volatile("BL update_current_psp");
 8000656:	f7ff ff65 	bl	8000524 <update_current_psp>
	//update current task
	__asm volatile("BL update_current_task");
 800065a:	f7ff ff77 	bl	800054c <update_current_task>
	//get the PSP of this task
	__asm volatile("BL get_current_psp");
 800065e:	f7ff ff51 	bl	8000504 <get_current_psp>
	//load R4-R11 of the next task
	__asm volatile("LDMIA R0!, {R4-R11}");
 8000662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//move R0 into PSP
	__asm volatile("MSR PSP, R0");
 8000666:	f380 8809 	msr	PSP, r0
	//pop back EXC_RETURN
	__asm volatile("POP {LR}");
 800066a:	f85d eb04 	ldr.w	lr, [sp], #4
	//branch to EXC_RETURN
	__asm volatile("BX LR");
 800066e:	4770      	bx	lr
}
 8000670:	bf00      	nop
	...

08000674 <task_delay>:

void task_delay(uint32_t tick_count) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].sleep_count = g_tick_count + tick_count;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <task_delay+0x3c>)
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <task_delay+0x40>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	440a      	add	r2, r1
 8000688:	490b      	ldr	r1, [pc, #44]	; (80006b8 <task_delay+0x44>)
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	440b      	add	r3, r1
 800068e:	3304      	adds	r3, #4
 8000690:	601a      	str	r2, [r3, #0]
	user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <task_delay+0x40>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <task_delay+0x44>)
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	4413      	add	r3, r2
 800069c:	3308      	adds	r3, #8
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	701a      	strb	r2, [r3, #0]
	task_yield();
 80006a2:	f000 f80b 	bl	80006bc <task_yield>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000090 	.word	0x20000090
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000094 	.word	0x20000094

080006bc <task_yield>:

void task_yield(void) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
	//Pend the PendSV Handler where the context switching occurs
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <task_yield+0x20>)
 80006c4:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	e000ed04 	.word	0xe000ed04

080006e0 <unblock_tasks>:

void unblock_tasks(void) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	e01b      	b.n	8000724 <unblock_tasks+0x44>
		if(user_tasks[i].current_state == TASK_BLOCKED_STATE) {
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <unblock_tasks+0x58>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	3308      	adds	r3, #8
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2bff      	cmp	r3, #255	; 0xff
 80006fa:	d110      	bne.n	800071e <unblock_tasks+0x3e>
			if(user_tasks[i].sleep_count == g_tick_count) {
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <unblock_tasks+0x58>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	4413      	add	r3, r2
 8000704:	3304      	adds	r3, #4
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <unblock_tasks+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d106      	bne.n	800071e <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <unblock_tasks+0x58>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	3308      	adds	r3, #8
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3301      	adds	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d9e0      	bls.n	80006ec <unblock_tasks+0xc>
			}
		}
	}
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094
 800073c:	20000090 	.word	0x20000090

08000740 <update_global_tick>:

void update_global_tick(void) {
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <update_global_tick+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a03      	ldr	r2, [pc, #12]	; (8000758 <update_global_tick+0x18>)
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000090 	.word	0x20000090

0800075c <HardFault_Handler>:

void HardFault_Handler(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	printf("Exception: Hard fault\n");
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <HardFault_Handler+0xc>)
 8000762:	f000 f9ab 	bl	8000abc <puts>
	while(1);
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0xa>
 8000768:	08001380 	.word	0x08001380

0800076c <MemManage_Handler>:
}

void MemManage_Handler(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	printf("Exception: Memory manage fault\n");
 8000770:	4801      	ldr	r0, [pc, #4]	; (8000778 <MemManage_Handler+0xc>)
 8000772:	f000 f9a3 	bl	8000abc <puts>
	while(1);
 8000776:	e7fe      	b.n	8000776 <MemManage_Handler+0xa>
 8000778:	08001398 	.word	0x08001398

0800077c <BusFault_Handler>:
}

void BusFault_Handler(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	printf("Exception: Bus fault\n");
 8000780:	4801      	ldr	r0, [pc, #4]	; (8000788 <BusFault_Handler+0xc>)
 8000782:	f000 f99b 	bl	8000abc <puts>
	while(1);
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0xa>
 8000788:	080013b8 	.word	0x080013b8

0800078c <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	printf("Exception: Usage fault\n");
 8000790:	4801      	ldr	r0, [pc, #4]	; (8000798 <UsageFault_Handler+0xc>)
 8000792:	f000 f993 	bl	8000abc <puts>
	while(1);
 8000796:	e7fe      	b.n	8000796 <UsageFault_Handler+0xa>
 8000798:	080013d0 	.word	0x080013d0

0800079c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <ITM_SendChar+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <ITM_SendChar+0x44>)
 80007ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <ITM_SendChar+0x48>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <ITM_SendChar+0x48>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007be:	bf00      	nop
 80007c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f8      	beq.n	80007c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	e000edfc 	.word	0xe000edfc
 80007e4:	e0000e00 	.word	0xe0000e00

080007e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
	}

return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffad 	bl	800079c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
	}
	return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return -1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000880:	605a      	str	r2, [r3, #4]
	return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b085      	sub	sp, #20
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
	return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f000 f846 	bl	800097c <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20020000 	.word	0x20020000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000084 	.word	0x20000084
 8000924:	200000f8 	.word	0x200000f8

08000928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800092c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000956:	f000 f817 	bl	8000988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fca3 	bl	80002a4 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800096c:	08001454 	.word	0x08001454
  ldr r2, =_sbss
 8000970:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000974:	200000f4 	.word	0x200000f4

08000978 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <__errno>:
 800097c:	4b01      	ldr	r3, [pc, #4]	; (8000984 <__errno+0x8>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000004 	.word	0x20000004

08000988 <__libc_init_array>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4d0d      	ldr	r5, [pc, #52]	; (80009c0 <__libc_init_array+0x38>)
 800098c:	4c0d      	ldr	r4, [pc, #52]	; (80009c4 <__libc_init_array+0x3c>)
 800098e:	1b64      	subs	r4, r4, r5
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	2600      	movs	r6, #0
 8000994:	42a6      	cmp	r6, r4
 8000996:	d109      	bne.n	80009ac <__libc_init_array+0x24>
 8000998:	4d0b      	ldr	r5, [pc, #44]	; (80009c8 <__libc_init_array+0x40>)
 800099a:	4c0c      	ldr	r4, [pc, #48]	; (80009cc <__libc_init_array+0x44>)
 800099c:	f000 fce4 	bl	8001368 <_init>
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	2600      	movs	r6, #0
 80009a6:	42a6      	cmp	r6, r4
 80009a8:	d105      	bne.n	80009b6 <__libc_init_array+0x2e>
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b0:	4798      	blx	r3
 80009b2:	3601      	adds	r6, #1
 80009b4:	e7ee      	b.n	8000994 <__libc_init_array+0xc>
 80009b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ba:	4798      	blx	r3
 80009bc:	3601      	adds	r6, #1
 80009be:	e7f2      	b.n	80009a6 <__libc_init_array+0x1e>
 80009c0:	0800144c 	.word	0x0800144c
 80009c4:	0800144c 	.word	0x0800144c
 80009c8:	0800144c 	.word	0x0800144c
 80009cc:	08001450 	.word	0x08001450

080009d0 <memset>:
 80009d0:	4402      	add	r2, r0
 80009d2:	4603      	mov	r3, r0
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d100      	bne.n	80009da <memset+0xa>
 80009d8:	4770      	bx	lr
 80009da:	f803 1b01 	strb.w	r1, [r3], #1
 80009de:	e7f9      	b.n	80009d4 <memset+0x4>

080009e0 <_puts_r>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	460e      	mov	r6, r1
 80009e4:	4605      	mov	r5, r0
 80009e6:	b118      	cbz	r0, 80009f0 <_puts_r+0x10>
 80009e8:	6983      	ldr	r3, [r0, #24]
 80009ea:	b90b      	cbnz	r3, 80009f0 <_puts_r+0x10>
 80009ec:	f000 fa48 	bl	8000e80 <__sinit>
 80009f0:	69ab      	ldr	r3, [r5, #24]
 80009f2:	68ac      	ldr	r4, [r5, #8]
 80009f4:	b913      	cbnz	r3, 80009fc <_puts_r+0x1c>
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 fa42 	bl	8000e80 <__sinit>
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <_puts_r+0xd0>)
 80009fe:	429c      	cmp	r4, r3
 8000a00:	d120      	bne.n	8000a44 <_puts_r+0x64>
 8000a02:	686c      	ldr	r4, [r5, #4]
 8000a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a06:	07db      	lsls	r3, r3, #31
 8000a08:	d405      	bmi.n	8000a16 <_puts_r+0x36>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	0598      	lsls	r0, r3, #22
 8000a0e:	d402      	bmi.n	8000a16 <_puts_r+0x36>
 8000a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a12:	f000 fad3 	bl	8000fbc <__retarget_lock_acquire_recursive>
 8000a16:	89a3      	ldrh	r3, [r4, #12]
 8000a18:	0719      	lsls	r1, r3, #28
 8000a1a:	d51d      	bpl.n	8000a58 <_puts_r+0x78>
 8000a1c:	6923      	ldr	r3, [r4, #16]
 8000a1e:	b1db      	cbz	r3, 8000a58 <_puts_r+0x78>
 8000a20:	3e01      	subs	r6, #1
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	60a3      	str	r3, [r4, #8]
 8000a2c:	bb39      	cbnz	r1, 8000a7e <_puts_r+0x9e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da38      	bge.n	8000aa4 <_puts_r+0xc4>
 8000a32:	4622      	mov	r2, r4
 8000a34:	210a      	movs	r1, #10
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 f848 	bl	8000acc <__swbuf_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d011      	beq.n	8000a64 <_puts_r+0x84>
 8000a40:	250a      	movs	r5, #10
 8000a42:	e011      	b.n	8000a68 <_puts_r+0x88>
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <_puts_r+0xd4>)
 8000a46:	429c      	cmp	r4, r3
 8000a48:	d101      	bne.n	8000a4e <_puts_r+0x6e>
 8000a4a:	68ac      	ldr	r4, [r5, #8]
 8000a4c:	e7da      	b.n	8000a04 <_puts_r+0x24>
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <_puts_r+0xd8>)
 8000a50:	429c      	cmp	r4, r3
 8000a52:	bf08      	it	eq
 8000a54:	68ec      	ldreq	r4, [r5, #12]
 8000a56:	e7d5      	b.n	8000a04 <_puts_r+0x24>
 8000a58:	4621      	mov	r1, r4
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f000 f888 	bl	8000b70 <__swsetup_r>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d0dd      	beq.n	8000a20 <_puts_r+0x40>
 8000a64:	f04f 35ff 	mov.w	r5, #4294967295
 8000a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a6a:	07da      	lsls	r2, r3, #31
 8000a6c:	d405      	bmi.n	8000a7a <_puts_r+0x9a>
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	059b      	lsls	r3, r3, #22
 8000a72:	d402      	bmi.n	8000a7a <_puts_r+0x9a>
 8000a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a76:	f000 faa2 	bl	8000fbe <__retarget_lock_release_recursive>
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da04      	bge.n	8000a8c <_puts_r+0xac>
 8000a82:	69a2      	ldr	r2, [r4, #24]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dc06      	bgt.n	8000a96 <_puts_r+0xb6>
 8000a88:	290a      	cmp	r1, #10
 8000a8a:	d004      	beq.n	8000a96 <_puts_r+0xb6>
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	6022      	str	r2, [r4, #0]
 8000a92:	7019      	strb	r1, [r3, #0]
 8000a94:	e7c5      	b.n	8000a22 <_puts_r+0x42>
 8000a96:	4622      	mov	r2, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 f817 	bl	8000acc <__swbuf_r>
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	d1bf      	bne.n	8000a22 <_puts_r+0x42>
 8000aa2:	e7df      	b.n	8000a64 <_puts_r+0x84>
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	250a      	movs	r5, #10
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	6022      	str	r2, [r4, #0]
 8000aac:	701d      	strb	r5, [r3, #0]
 8000aae:	e7db      	b.n	8000a68 <_puts_r+0x88>
 8000ab0:	0800140c 	.word	0x0800140c
 8000ab4:	0800142c 	.word	0x0800142c
 8000ab8:	080013ec 	.word	0x080013ec

08000abc <puts>:
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <puts+0xc>)
 8000abe:	4601      	mov	r1, r0
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f7ff bf8d 	b.w	80009e0 <_puts_r>
 8000ac6:	bf00      	nop
 8000ac8:	20000004 	.word	0x20000004

08000acc <__swbuf_r>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	460e      	mov	r6, r1
 8000ad0:	4614      	mov	r4, r2
 8000ad2:	4605      	mov	r5, r0
 8000ad4:	b118      	cbz	r0, 8000ade <__swbuf_r+0x12>
 8000ad6:	6983      	ldr	r3, [r0, #24]
 8000ad8:	b90b      	cbnz	r3, 8000ade <__swbuf_r+0x12>
 8000ada:	f000 f9d1 	bl	8000e80 <__sinit>
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <__swbuf_r+0x98>)
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	d12b      	bne.n	8000b3c <__swbuf_r+0x70>
 8000ae4:	686c      	ldr	r4, [r5, #4]
 8000ae6:	69a3      	ldr	r3, [r4, #24]
 8000ae8:	60a3      	str	r3, [r4, #8]
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	071a      	lsls	r2, r3, #28
 8000aee:	d52f      	bpl.n	8000b50 <__swbuf_r+0x84>
 8000af0:	6923      	ldr	r3, [r4, #16]
 8000af2:	b36b      	cbz	r3, 8000b50 <__swbuf_r+0x84>
 8000af4:	6923      	ldr	r3, [r4, #16]
 8000af6:	6820      	ldr	r0, [r4, #0]
 8000af8:	1ac0      	subs	r0, r0, r3
 8000afa:	6963      	ldr	r3, [r4, #20]
 8000afc:	b2f6      	uxtb	r6, r6
 8000afe:	4283      	cmp	r3, r0
 8000b00:	4637      	mov	r7, r6
 8000b02:	dc04      	bgt.n	8000b0e <__swbuf_r+0x42>
 8000b04:	4621      	mov	r1, r4
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 f926 	bl	8000d58 <_fflush_r>
 8000b0c:	bb30      	cbnz	r0, 8000b5c <__swbuf_r+0x90>
 8000b0e:	68a3      	ldr	r3, [r4, #8]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	60a3      	str	r3, [r4, #8]
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	6022      	str	r2, [r4, #0]
 8000b1a:	701e      	strb	r6, [r3, #0]
 8000b1c:	6963      	ldr	r3, [r4, #20]
 8000b1e:	3001      	adds	r0, #1
 8000b20:	4283      	cmp	r3, r0
 8000b22:	d004      	beq.n	8000b2e <__swbuf_r+0x62>
 8000b24:	89a3      	ldrh	r3, [r4, #12]
 8000b26:	07db      	lsls	r3, r3, #31
 8000b28:	d506      	bpl.n	8000b38 <__swbuf_r+0x6c>
 8000b2a:	2e0a      	cmp	r6, #10
 8000b2c:	d104      	bne.n	8000b38 <__swbuf_r+0x6c>
 8000b2e:	4621      	mov	r1, r4
 8000b30:	4628      	mov	r0, r5
 8000b32:	f000 f911 	bl	8000d58 <_fflush_r>
 8000b36:	b988      	cbnz	r0, 8000b5c <__swbuf_r+0x90>
 8000b38:	4638      	mov	r0, r7
 8000b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <__swbuf_r+0x9c>)
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	d101      	bne.n	8000b46 <__swbuf_r+0x7a>
 8000b42:	68ac      	ldr	r4, [r5, #8]
 8000b44:	e7cf      	b.n	8000ae6 <__swbuf_r+0x1a>
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <__swbuf_r+0xa0>)
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	bf08      	it	eq
 8000b4c:	68ec      	ldreq	r4, [r5, #12]
 8000b4e:	e7ca      	b.n	8000ae6 <__swbuf_r+0x1a>
 8000b50:	4621      	mov	r1, r4
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 f80c 	bl	8000b70 <__swsetup_r>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d0cb      	beq.n	8000af4 <__swbuf_r+0x28>
 8000b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8000b60:	e7ea      	b.n	8000b38 <__swbuf_r+0x6c>
 8000b62:	bf00      	nop
 8000b64:	0800140c 	.word	0x0800140c
 8000b68:	0800142c 	.word	0x0800142c
 8000b6c:	080013ec 	.word	0x080013ec

08000b70 <__swsetup_r>:
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <__swsetup_r+0xcc>)
 8000b72:	b570      	push	{r4, r5, r6, lr}
 8000b74:	681d      	ldr	r5, [r3, #0]
 8000b76:	4606      	mov	r6, r0
 8000b78:	460c      	mov	r4, r1
 8000b7a:	b125      	cbz	r5, 8000b86 <__swsetup_r+0x16>
 8000b7c:	69ab      	ldr	r3, [r5, #24]
 8000b7e:	b913      	cbnz	r3, 8000b86 <__swsetup_r+0x16>
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 f97d 	bl	8000e80 <__sinit>
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <__swsetup_r+0xd0>)
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	d10f      	bne.n	8000bac <__swsetup_r+0x3c>
 8000b8c:	686c      	ldr	r4, [r5, #4]
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b94:	0719      	lsls	r1, r3, #28
 8000b96:	d42c      	bmi.n	8000bf2 <__swsetup_r+0x82>
 8000b98:	06dd      	lsls	r5, r3, #27
 8000b9a:	d411      	bmi.n	8000bc0 <__swsetup_r+0x50>
 8000b9c:	2309      	movs	r3, #9
 8000b9e:	6033      	str	r3, [r6, #0]
 8000ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ba4:	81a3      	strh	r3, [r4, #12]
 8000ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8000baa:	e03e      	b.n	8000c2a <__swsetup_r+0xba>
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <__swsetup_r+0xd4>)
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	d101      	bne.n	8000bb6 <__swsetup_r+0x46>
 8000bb2:	68ac      	ldr	r4, [r5, #8]
 8000bb4:	e7eb      	b.n	8000b8e <__swsetup_r+0x1e>
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <__swsetup_r+0xd8>)
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	bf08      	it	eq
 8000bbc:	68ec      	ldreq	r4, [r5, #12]
 8000bbe:	e7e6      	b.n	8000b8e <__swsetup_r+0x1e>
 8000bc0:	0758      	lsls	r0, r3, #29
 8000bc2:	d512      	bpl.n	8000bea <__swsetup_r+0x7a>
 8000bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bc6:	b141      	cbz	r1, 8000bda <__swsetup_r+0x6a>
 8000bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d002      	beq.n	8000bd6 <__swsetup_r+0x66>
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	f000 fa59 	bl	8001088 <_free_r>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000be0:	81a3      	strh	r3, [r4, #12]
 8000be2:	2300      	movs	r3, #0
 8000be4:	6063      	str	r3, [r4, #4]
 8000be6:	6923      	ldr	r3, [r4, #16]
 8000be8:	6023      	str	r3, [r4, #0]
 8000bea:	89a3      	ldrh	r3, [r4, #12]
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	81a3      	strh	r3, [r4, #12]
 8000bf2:	6923      	ldr	r3, [r4, #16]
 8000bf4:	b94b      	cbnz	r3, 8000c0a <__swsetup_r+0x9a>
 8000bf6:	89a3      	ldrh	r3, [r4, #12]
 8000bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c00:	d003      	beq.n	8000c0a <__swsetup_r+0x9a>
 8000c02:	4621      	mov	r1, r4
 8000c04:	4630      	mov	r0, r6
 8000c06:	f000 f9ff 	bl	8001008 <__smakebuf_r>
 8000c0a:	89a0      	ldrh	r0, [r4, #12]
 8000c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c10:	f010 0301 	ands.w	r3, r0, #1
 8000c14:	d00a      	beq.n	8000c2c <__swsetup_r+0xbc>
 8000c16:	2300      	movs	r3, #0
 8000c18:	60a3      	str	r3, [r4, #8]
 8000c1a:	6963      	ldr	r3, [r4, #20]
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	61a3      	str	r3, [r4, #24]
 8000c20:	6923      	ldr	r3, [r4, #16]
 8000c22:	b943      	cbnz	r3, 8000c36 <__swsetup_r+0xc6>
 8000c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c28:	d1ba      	bne.n	8000ba0 <__swsetup_r+0x30>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	0781      	lsls	r1, r0, #30
 8000c2e:	bf58      	it	pl
 8000c30:	6963      	ldrpl	r3, [r4, #20]
 8000c32:	60a3      	str	r3, [r4, #8]
 8000c34:	e7f4      	b.n	8000c20 <__swsetup_r+0xb0>
 8000c36:	2000      	movs	r0, #0
 8000c38:	e7f7      	b.n	8000c2a <__swsetup_r+0xba>
 8000c3a:	bf00      	nop
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	0800140c 	.word	0x0800140c
 8000c44:	0800142c 	.word	0x0800142c
 8000c48:	080013ec 	.word	0x080013ec

08000c4c <__sflush_r>:
 8000c4c:	898a      	ldrh	r2, [r1, #12]
 8000c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c52:	4605      	mov	r5, r0
 8000c54:	0710      	lsls	r0, r2, #28
 8000c56:	460c      	mov	r4, r1
 8000c58:	d458      	bmi.n	8000d0c <__sflush_r+0xc0>
 8000c5a:	684b      	ldr	r3, [r1, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	dc05      	bgt.n	8000c6c <__sflush_r+0x20>
 8000c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dc02      	bgt.n	8000c6c <__sflush_r+0x20>
 8000c66:	2000      	movs	r0, #0
 8000c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0f9      	beq.n	8000c66 <__sflush_r+0x1a>
 8000c72:	2300      	movs	r3, #0
 8000c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c78:	682f      	ldr	r7, [r5, #0]
 8000c7a:	602b      	str	r3, [r5, #0]
 8000c7c:	d032      	beq.n	8000ce4 <__sflush_r+0x98>
 8000c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	075a      	lsls	r2, r3, #29
 8000c84:	d505      	bpl.n	8000c92 <__sflush_r+0x46>
 8000c86:	6863      	ldr	r3, [r4, #4]
 8000c88:	1ac0      	subs	r0, r0, r3
 8000c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c8c:	b10b      	cbz	r3, 8000c92 <__sflush_r+0x46>
 8000c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c90:	1ac0      	subs	r0, r0, r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	4602      	mov	r2, r0
 8000c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c98:	6a21      	ldr	r1, [r4, #32]
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	47b0      	blx	r6
 8000c9e:	1c43      	adds	r3, r0, #1
 8000ca0:	89a3      	ldrh	r3, [r4, #12]
 8000ca2:	d106      	bne.n	8000cb2 <__sflush_r+0x66>
 8000ca4:	6829      	ldr	r1, [r5, #0]
 8000ca6:	291d      	cmp	r1, #29
 8000ca8:	d82c      	bhi.n	8000d04 <__sflush_r+0xb8>
 8000caa:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <__sflush_r+0x108>)
 8000cac:	40ca      	lsrs	r2, r1
 8000cae:	07d6      	lsls	r6, r2, #31
 8000cb0:	d528      	bpl.n	8000d04 <__sflush_r+0xb8>
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6062      	str	r2, [r4, #4]
 8000cb6:	04d9      	lsls	r1, r3, #19
 8000cb8:	6922      	ldr	r2, [r4, #16]
 8000cba:	6022      	str	r2, [r4, #0]
 8000cbc:	d504      	bpl.n	8000cc8 <__sflush_r+0x7c>
 8000cbe:	1c42      	adds	r2, r0, #1
 8000cc0:	d101      	bne.n	8000cc6 <__sflush_r+0x7a>
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	b903      	cbnz	r3, 8000cc8 <__sflush_r+0x7c>
 8000cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cca:	602f      	str	r7, [r5, #0]
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d0ca      	beq.n	8000c66 <__sflush_r+0x1a>
 8000cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d002      	beq.n	8000cde <__sflush_r+0x92>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f000 f9d5 	bl	8001088 <_free_r>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8000ce2:	e7c1      	b.n	8000c68 <__sflush_r+0x1c>
 8000ce4:	6a21      	ldr	r1, [r4, #32]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4628      	mov	r0, r5
 8000cea:	47b0      	blx	r6
 8000cec:	1c41      	adds	r1, r0, #1
 8000cee:	d1c7      	bne.n	8000c80 <__sflush_r+0x34>
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0c4      	beq.n	8000c80 <__sflush_r+0x34>
 8000cf6:	2b1d      	cmp	r3, #29
 8000cf8:	d001      	beq.n	8000cfe <__sflush_r+0xb2>
 8000cfa:	2b16      	cmp	r3, #22
 8000cfc:	d101      	bne.n	8000d02 <__sflush_r+0xb6>
 8000cfe:	602f      	str	r7, [r5, #0]
 8000d00:	e7b1      	b.n	8000c66 <__sflush_r+0x1a>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	81a3      	strh	r3, [r4, #12]
 8000d0a:	e7ad      	b.n	8000c68 <__sflush_r+0x1c>
 8000d0c:	690f      	ldr	r7, [r1, #16]
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d0a9      	beq.n	8000c66 <__sflush_r+0x1a>
 8000d12:	0793      	lsls	r3, r2, #30
 8000d14:	680e      	ldr	r6, [r1, #0]
 8000d16:	bf08      	it	eq
 8000d18:	694b      	ldreq	r3, [r1, #20]
 8000d1a:	600f      	str	r7, [r1, #0]
 8000d1c:	bf18      	it	ne
 8000d1e:	2300      	movne	r3, #0
 8000d20:	eba6 0807 	sub.w	r8, r6, r7
 8000d24:	608b      	str	r3, [r1, #8]
 8000d26:	f1b8 0f00 	cmp.w	r8, #0
 8000d2a:	dd9c      	ble.n	8000c66 <__sflush_r+0x1a>
 8000d2c:	6a21      	ldr	r1, [r4, #32]
 8000d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d30:	4643      	mov	r3, r8
 8000d32:	463a      	mov	r2, r7
 8000d34:	4628      	mov	r0, r5
 8000d36:	47b0      	blx	r6
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	dc06      	bgt.n	8000d4a <__sflush_r+0xfe>
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	e78e      	b.n	8000c68 <__sflush_r+0x1c>
 8000d4a:	4407      	add	r7, r0
 8000d4c:	eba8 0800 	sub.w	r8, r8, r0
 8000d50:	e7e9      	b.n	8000d26 <__sflush_r+0xda>
 8000d52:	bf00      	nop
 8000d54:	20400001 	.word	0x20400001

08000d58 <_fflush_r>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	690b      	ldr	r3, [r1, #16]
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	460c      	mov	r4, r1
 8000d60:	b913      	cbnz	r3, 8000d68 <_fflush_r+0x10>
 8000d62:	2500      	movs	r5, #0
 8000d64:	4628      	mov	r0, r5
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	b118      	cbz	r0, 8000d72 <_fflush_r+0x1a>
 8000d6a:	6983      	ldr	r3, [r0, #24]
 8000d6c:	b90b      	cbnz	r3, 8000d72 <_fflush_r+0x1a>
 8000d6e:	f000 f887 	bl	8000e80 <__sinit>
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <_fflush_r+0x6c>)
 8000d74:	429c      	cmp	r4, r3
 8000d76:	d11b      	bne.n	8000db0 <_fflush_r+0x58>
 8000d78:	686c      	ldr	r4, [r5, #4]
 8000d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0ef      	beq.n	8000d62 <_fflush_r+0xa>
 8000d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d84:	07d0      	lsls	r0, r2, #31
 8000d86:	d404      	bmi.n	8000d92 <_fflush_r+0x3a>
 8000d88:	0599      	lsls	r1, r3, #22
 8000d8a:	d402      	bmi.n	8000d92 <_fflush_r+0x3a>
 8000d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d8e:	f000 f915 	bl	8000fbc <__retarget_lock_acquire_recursive>
 8000d92:	4628      	mov	r0, r5
 8000d94:	4621      	mov	r1, r4
 8000d96:	f7ff ff59 	bl	8000c4c <__sflush_r>
 8000d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d9c:	07da      	lsls	r2, r3, #31
 8000d9e:	4605      	mov	r5, r0
 8000da0:	d4e0      	bmi.n	8000d64 <_fflush_r+0xc>
 8000da2:	89a3      	ldrh	r3, [r4, #12]
 8000da4:	059b      	lsls	r3, r3, #22
 8000da6:	d4dd      	bmi.n	8000d64 <_fflush_r+0xc>
 8000da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000daa:	f000 f908 	bl	8000fbe <__retarget_lock_release_recursive>
 8000dae:	e7d9      	b.n	8000d64 <_fflush_r+0xc>
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_fflush_r+0x70>)
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d101      	bne.n	8000dba <_fflush_r+0x62>
 8000db6:	68ac      	ldr	r4, [r5, #8]
 8000db8:	e7df      	b.n	8000d7a <_fflush_r+0x22>
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <_fflush_r+0x74>)
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	bf08      	it	eq
 8000dc0:	68ec      	ldreq	r4, [r5, #12]
 8000dc2:	e7da      	b.n	8000d7a <_fflush_r+0x22>
 8000dc4:	0800140c 	.word	0x0800140c
 8000dc8:	0800142c 	.word	0x0800142c
 8000dcc:	080013ec 	.word	0x080013ec

08000dd0 <std>:
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	b510      	push	{r4, lr}
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dde:	6083      	str	r3, [r0, #8]
 8000de0:	8181      	strh	r1, [r0, #12]
 8000de2:	6643      	str	r3, [r0, #100]	; 0x64
 8000de4:	81c2      	strh	r2, [r0, #14]
 8000de6:	6183      	str	r3, [r0, #24]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2208      	movs	r2, #8
 8000dec:	305c      	adds	r0, #92	; 0x5c
 8000dee:	f7ff fdef 	bl	80009d0 <memset>
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <std+0x38>)
 8000df4:	6263      	str	r3, [r4, #36]	; 0x24
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <std+0x3c>)
 8000df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <std+0x40>)
 8000dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <std+0x44>)
 8000e00:	6224      	str	r4, [r4, #32]
 8000e02:	6323      	str	r3, [r4, #48]	; 0x30
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	bf00      	nop
 8000e08:	080011f9 	.word	0x080011f9
 8000e0c:	0800121b 	.word	0x0800121b
 8000e10:	08001253 	.word	0x08001253
 8000e14:	08001277 	.word	0x08001277

08000e18 <_cleanup_r>:
 8000e18:	4901      	ldr	r1, [pc, #4]	; (8000e20 <_cleanup_r+0x8>)
 8000e1a:	f000 b8af 	b.w	8000f7c <_fwalk_reent>
 8000e1e:	bf00      	nop
 8000e20:	08000d59 	.word	0x08000d59

08000e24 <__sfmoreglue>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	1e4a      	subs	r2, r1, #1
 8000e28:	2568      	movs	r5, #104	; 0x68
 8000e2a:	4355      	muls	r5, r2
 8000e2c:	460e      	mov	r6, r1
 8000e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e32:	f000 f977 	bl	8001124 <_malloc_r>
 8000e36:	4604      	mov	r4, r0
 8000e38:	b140      	cbz	r0, 8000e4c <__sfmoreglue+0x28>
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8000e40:	300c      	adds	r0, #12
 8000e42:	60a0      	str	r0, [r4, #8]
 8000e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e48:	f7ff fdc2 	bl	80009d0 <memset>
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}

08000e50 <__sfp_lock_acquire>:
 8000e50:	4801      	ldr	r0, [pc, #4]	; (8000e58 <__sfp_lock_acquire+0x8>)
 8000e52:	f000 b8b3 	b.w	8000fbc <__retarget_lock_acquire_recursive>
 8000e56:	bf00      	nop
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <__sfp_lock_release>:
 8000e5c:	4801      	ldr	r0, [pc, #4]	; (8000e64 <__sfp_lock_release+0x8>)
 8000e5e:	f000 b8ae 	b.w	8000fbe <__retarget_lock_release_recursive>
 8000e62:	bf00      	nop
 8000e64:	200000ec 	.word	0x200000ec

08000e68 <__sinit_lock_acquire>:
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <__sinit_lock_acquire+0x8>)
 8000e6a:	f000 b8a7 	b.w	8000fbc <__retarget_lock_acquire_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200000e7 	.word	0x200000e7

08000e74 <__sinit_lock_release>:
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__sinit_lock_release+0x8>)
 8000e76:	f000 b8a2 	b.w	8000fbe <__retarget_lock_release_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200000e7 	.word	0x200000e7

08000e80 <__sinit>:
 8000e80:	b510      	push	{r4, lr}
 8000e82:	4604      	mov	r4, r0
 8000e84:	f7ff fff0 	bl	8000e68 <__sinit_lock_acquire>
 8000e88:	69a3      	ldr	r3, [r4, #24]
 8000e8a:	b11b      	cbz	r3, 8000e94 <__sinit+0x14>
 8000e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e90:	f7ff bff0 	b.w	8000e74 <__sinit_lock_release>
 8000e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e98:	6523      	str	r3, [r4, #80]	; 0x50
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <__sinit+0x68>)
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <__sinit+0x6c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	bf04      	itt	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	61a3      	streq	r3, [r4, #24]
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f000 f820 	bl	8000ef0 <__sfp>
 8000eb0:	6060      	str	r0, [r4, #4]
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f000 f81c 	bl	8000ef0 <__sfp>
 8000eb8:	60a0      	str	r0, [r4, #8]
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f000 f818 	bl	8000ef0 <__sfp>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60e0      	str	r0, [r4, #12]
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	6860      	ldr	r0, [r4, #4]
 8000ec8:	f7ff ff82 	bl	8000dd0 <std>
 8000ecc:	68a0      	ldr	r0, [r4, #8]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2109      	movs	r1, #9
 8000ed2:	f7ff ff7d 	bl	8000dd0 <std>
 8000ed6:	68e0      	ldr	r0, [r4, #12]
 8000ed8:	2202      	movs	r2, #2
 8000eda:	2112      	movs	r1, #18
 8000edc:	f7ff ff78 	bl	8000dd0 <std>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61a3      	str	r3, [r4, #24]
 8000ee4:	e7d2      	b.n	8000e8c <__sinit+0xc>
 8000ee6:	bf00      	nop
 8000ee8:	080013e8 	.word	0x080013e8
 8000eec:	08000e19 	.word	0x08000e19

08000ef0 <__sfp>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	4607      	mov	r7, r0
 8000ef4:	f7ff ffac 	bl	8000e50 <__sfp_lock_acquire>
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <__sfp+0x84>)
 8000efa:	681e      	ldr	r6, [r3, #0]
 8000efc:	69b3      	ldr	r3, [r6, #24]
 8000efe:	b913      	cbnz	r3, 8000f06 <__sfp+0x16>
 8000f00:	4630      	mov	r0, r6
 8000f02:	f7ff ffbd 	bl	8000e80 <__sinit>
 8000f06:	3648      	adds	r6, #72	; 0x48
 8000f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	d503      	bpl.n	8000f18 <__sfp+0x28>
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	b30b      	cbz	r3, 8000f58 <__sfp+0x68>
 8000f14:	6836      	ldr	r6, [r6, #0]
 8000f16:	e7f7      	b.n	8000f08 <__sfp+0x18>
 8000f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f1c:	b9d5      	cbnz	r5, 8000f54 <__sfp+0x64>
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <__sfp+0x88>)
 8000f20:	60e3      	str	r3, [r4, #12]
 8000f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f26:	6665      	str	r5, [r4, #100]	; 0x64
 8000f28:	f000 f847 	bl	8000fba <__retarget_lock_init_recursive>
 8000f2c:	f7ff ff96 	bl	8000e5c <__sfp_lock_release>
 8000f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f38:	6025      	str	r5, [r4, #0]
 8000f3a:	61a5      	str	r5, [r4, #24]
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4629      	mov	r1, r5
 8000f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f44:	f7ff fd44 	bl	80009d0 <memset>
 8000f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f50:	4620      	mov	r0, r4
 8000f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f54:	3468      	adds	r4, #104	; 0x68
 8000f56:	e7d9      	b.n	8000f0c <__sfp+0x1c>
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	f7ff ff62 	bl	8000e24 <__sfmoreglue>
 8000f60:	4604      	mov	r4, r0
 8000f62:	6030      	str	r0, [r6, #0]
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1d5      	bne.n	8000f14 <__sfp+0x24>
 8000f68:	f7ff ff78 	bl	8000e5c <__sfp_lock_release>
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e7ee      	b.n	8000f50 <__sfp+0x60>
 8000f72:	bf00      	nop
 8000f74:	080013e8 	.word	0x080013e8
 8000f78:	ffff0001 	.word	0xffff0001

08000f7c <_fwalk_reent>:
 8000f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f80:	4606      	mov	r6, r0
 8000f82:	4688      	mov	r8, r1
 8000f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f88:	2700      	movs	r7, #0
 8000f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8000f92:	d505      	bpl.n	8000fa0 <_fwalk_reent+0x24>
 8000f94:	6824      	ldr	r4, [r4, #0]
 8000f96:	2c00      	cmp	r4, #0
 8000f98:	d1f7      	bne.n	8000f8a <_fwalk_reent+0xe>
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fa0:	89ab      	ldrh	r3, [r5, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d907      	bls.n	8000fb6 <_fwalk_reent+0x3a>
 8000fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000faa:	3301      	adds	r3, #1
 8000fac:	d003      	beq.n	8000fb6 <_fwalk_reent+0x3a>
 8000fae:	4629      	mov	r1, r5
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	47c0      	blx	r8
 8000fb4:	4307      	orrs	r7, r0
 8000fb6:	3568      	adds	r5, #104	; 0x68
 8000fb8:	e7e9      	b.n	8000f8e <_fwalk_reent+0x12>

08000fba <__retarget_lock_init_recursive>:
 8000fba:	4770      	bx	lr

08000fbc <__retarget_lock_acquire_recursive>:
 8000fbc:	4770      	bx	lr

08000fbe <__retarget_lock_release_recursive>:
 8000fbe:	4770      	bx	lr

08000fc0 <__swhatbuf_r>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	460e      	mov	r6, r1
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	b096      	sub	sp, #88	; 0x58
 8000fcc:	4614      	mov	r4, r2
 8000fce:	461d      	mov	r5, r3
 8000fd0:	da07      	bge.n	8000fe2 <__swhatbuf_r+0x22>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	602b      	str	r3, [r5, #0]
 8000fd6:	89b3      	ldrh	r3, [r6, #12]
 8000fd8:	061a      	lsls	r2, r3, #24
 8000fda:	d410      	bmi.n	8000ffe <__swhatbuf_r+0x3e>
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	e00e      	b.n	8001000 <__swhatbuf_r+0x40>
 8000fe2:	466a      	mov	r2, sp
 8000fe4:	f000 f96e 	bl	80012c4 <_fstat_r>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	dbf2      	blt.n	8000fd2 <__swhatbuf_r+0x12>
 8000fec:	9a01      	ldr	r2, [sp, #4]
 8000fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ff6:	425a      	negs	r2, r3
 8000ff8:	415a      	adcs	r2, r3
 8000ffa:	602a      	str	r2, [r5, #0]
 8000ffc:	e7ee      	b.n	8000fdc <__swhatbuf_r+0x1c>
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	2000      	movs	r0, #0
 8001002:	6023      	str	r3, [r4, #0]
 8001004:	b016      	add	sp, #88	; 0x58
 8001006:	bd70      	pop	{r4, r5, r6, pc}

08001008 <__smakebuf_r>:
 8001008:	898b      	ldrh	r3, [r1, #12]
 800100a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800100c:	079d      	lsls	r5, r3, #30
 800100e:	4606      	mov	r6, r0
 8001010:	460c      	mov	r4, r1
 8001012:	d507      	bpl.n	8001024 <__smakebuf_r+0x1c>
 8001014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	6123      	str	r3, [r4, #16]
 800101c:	2301      	movs	r3, #1
 800101e:	6163      	str	r3, [r4, #20]
 8001020:	b002      	add	sp, #8
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	ab01      	add	r3, sp, #4
 8001026:	466a      	mov	r2, sp
 8001028:	f7ff ffca 	bl	8000fc0 <__swhatbuf_r>
 800102c:	9900      	ldr	r1, [sp, #0]
 800102e:	4605      	mov	r5, r0
 8001030:	4630      	mov	r0, r6
 8001032:	f000 f877 	bl	8001124 <_malloc_r>
 8001036:	b948      	cbnz	r0, 800104c <__smakebuf_r+0x44>
 8001038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800103c:	059a      	lsls	r2, r3, #22
 800103e:	d4ef      	bmi.n	8001020 <__smakebuf_r+0x18>
 8001040:	f023 0303 	bic.w	r3, r3, #3
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	81a3      	strh	r3, [r4, #12]
 800104a:	e7e3      	b.n	8001014 <__smakebuf_r+0xc>
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <__smakebuf_r+0x7c>)
 800104e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	6020      	str	r0, [r4, #0]
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	6163      	str	r3, [r4, #20]
 800105e:	9b01      	ldr	r3, [sp, #4]
 8001060:	6120      	str	r0, [r4, #16]
 8001062:	b15b      	cbz	r3, 800107c <__smakebuf_r+0x74>
 8001064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001068:	4630      	mov	r0, r6
 800106a:	f000 f93d 	bl	80012e8 <_isatty_r>
 800106e:	b128      	cbz	r0, 800107c <__smakebuf_r+0x74>
 8001070:	89a3      	ldrh	r3, [r4, #12]
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	81a3      	strh	r3, [r4, #12]
 800107c:	89a0      	ldrh	r0, [r4, #12]
 800107e:	4305      	orrs	r5, r0
 8001080:	81a5      	strh	r5, [r4, #12]
 8001082:	e7cd      	b.n	8001020 <__smakebuf_r+0x18>
 8001084:	08000e19 	.word	0x08000e19

08001088 <_free_r>:
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	4605      	mov	r5, r0
 800108c:	2900      	cmp	r1, #0
 800108e:	d045      	beq.n	800111c <_free_r+0x94>
 8001090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001094:	1f0c      	subs	r4, r1, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	bfb8      	it	lt
 800109a:	18e4      	addlt	r4, r4, r3
 800109c:	f000 f946 	bl	800132c <__malloc_lock>
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <_free_r+0x98>)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	4610      	mov	r0, r2
 80010a6:	b933      	cbnz	r3, 80010b6 <_free_r+0x2e>
 80010a8:	6063      	str	r3, [r4, #4]
 80010aa:	6014      	str	r4, [r2, #0]
 80010ac:	4628      	mov	r0, r5
 80010ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010b2:	f000 b941 	b.w	8001338 <__malloc_unlock>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d90b      	bls.n	80010d2 <_free_r+0x4a>
 80010ba:	6821      	ldr	r1, [r4, #0]
 80010bc:	1862      	adds	r2, r4, r1
 80010be:	4293      	cmp	r3, r2
 80010c0:	bf04      	itt	eq
 80010c2:	681a      	ldreq	r2, [r3, #0]
 80010c4:	685b      	ldreq	r3, [r3, #4]
 80010c6:	6063      	str	r3, [r4, #4]
 80010c8:	bf04      	itt	eq
 80010ca:	1852      	addeq	r2, r2, r1
 80010cc:	6022      	streq	r2, [r4, #0]
 80010ce:	6004      	str	r4, [r0, #0]
 80010d0:	e7ec      	b.n	80010ac <_free_r+0x24>
 80010d2:	461a      	mov	r2, r3
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	b10b      	cbz	r3, 80010dc <_free_r+0x54>
 80010d8:	42a3      	cmp	r3, r4
 80010da:	d9fa      	bls.n	80010d2 <_free_r+0x4a>
 80010dc:	6811      	ldr	r1, [r2, #0]
 80010de:	1850      	adds	r0, r2, r1
 80010e0:	42a0      	cmp	r0, r4
 80010e2:	d10b      	bne.n	80010fc <_free_r+0x74>
 80010e4:	6820      	ldr	r0, [r4, #0]
 80010e6:	4401      	add	r1, r0
 80010e8:	1850      	adds	r0, r2, r1
 80010ea:	4283      	cmp	r3, r0
 80010ec:	6011      	str	r1, [r2, #0]
 80010ee:	d1dd      	bne.n	80010ac <_free_r+0x24>
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	6053      	str	r3, [r2, #4]
 80010f6:	4401      	add	r1, r0
 80010f8:	6011      	str	r1, [r2, #0]
 80010fa:	e7d7      	b.n	80010ac <_free_r+0x24>
 80010fc:	d902      	bls.n	8001104 <_free_r+0x7c>
 80010fe:	230c      	movs	r3, #12
 8001100:	602b      	str	r3, [r5, #0]
 8001102:	e7d3      	b.n	80010ac <_free_r+0x24>
 8001104:	6820      	ldr	r0, [r4, #0]
 8001106:	1821      	adds	r1, r4, r0
 8001108:	428b      	cmp	r3, r1
 800110a:	bf04      	itt	eq
 800110c:	6819      	ldreq	r1, [r3, #0]
 800110e:	685b      	ldreq	r3, [r3, #4]
 8001110:	6063      	str	r3, [r4, #4]
 8001112:	bf04      	itt	eq
 8001114:	1809      	addeq	r1, r1, r0
 8001116:	6021      	streq	r1, [r4, #0]
 8001118:	6054      	str	r4, [r2, #4]
 800111a:	e7c7      	b.n	80010ac <_free_r+0x24>
 800111c:	bd38      	pop	{r3, r4, r5, pc}
 800111e:	bf00      	nop
 8001120:	20000088 	.word	0x20000088

08001124 <_malloc_r>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	1ccd      	adds	r5, r1, #3
 8001128:	f025 0503 	bic.w	r5, r5, #3
 800112c:	3508      	adds	r5, #8
 800112e:	2d0c      	cmp	r5, #12
 8001130:	bf38      	it	cc
 8001132:	250c      	movcc	r5, #12
 8001134:	2d00      	cmp	r5, #0
 8001136:	4606      	mov	r6, r0
 8001138:	db01      	blt.n	800113e <_malloc_r+0x1a>
 800113a:	42a9      	cmp	r1, r5
 800113c:	d903      	bls.n	8001146 <_malloc_r+0x22>
 800113e:	230c      	movs	r3, #12
 8001140:	6033      	str	r3, [r6, #0]
 8001142:	2000      	movs	r0, #0
 8001144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001146:	f000 f8f1 	bl	800132c <__malloc_lock>
 800114a:	4921      	ldr	r1, [pc, #132]	; (80011d0 <_malloc_r+0xac>)
 800114c:	680a      	ldr	r2, [r1, #0]
 800114e:	4614      	mov	r4, r2
 8001150:	b99c      	cbnz	r4, 800117a <_malloc_r+0x56>
 8001152:	4f20      	ldr	r7, [pc, #128]	; (80011d4 <_malloc_r+0xb0>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b923      	cbnz	r3, 8001162 <_malloc_r+0x3e>
 8001158:	4621      	mov	r1, r4
 800115a:	4630      	mov	r0, r6
 800115c:	f000 f83c 	bl	80011d8 <_sbrk_r>
 8001160:	6038      	str	r0, [r7, #0]
 8001162:	4629      	mov	r1, r5
 8001164:	4630      	mov	r0, r6
 8001166:	f000 f837 	bl	80011d8 <_sbrk_r>
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	d123      	bne.n	80011b6 <_malloc_r+0x92>
 800116e:	230c      	movs	r3, #12
 8001170:	6033      	str	r3, [r6, #0]
 8001172:	4630      	mov	r0, r6
 8001174:	f000 f8e0 	bl	8001338 <__malloc_unlock>
 8001178:	e7e3      	b.n	8001142 <_malloc_r+0x1e>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	1b5b      	subs	r3, r3, r5
 800117e:	d417      	bmi.n	80011b0 <_malloc_r+0x8c>
 8001180:	2b0b      	cmp	r3, #11
 8001182:	d903      	bls.n	800118c <_malloc_r+0x68>
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	441c      	add	r4, r3
 8001188:	6025      	str	r5, [r4, #0]
 800118a:	e004      	b.n	8001196 <_malloc_r+0x72>
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	42a2      	cmp	r2, r4
 8001190:	bf0c      	ite	eq
 8001192:	600b      	streq	r3, [r1, #0]
 8001194:	6053      	strne	r3, [r2, #4]
 8001196:	4630      	mov	r0, r6
 8001198:	f000 f8ce 	bl	8001338 <__malloc_unlock>
 800119c:	f104 000b 	add.w	r0, r4, #11
 80011a0:	1d23      	adds	r3, r4, #4
 80011a2:	f020 0007 	bic.w	r0, r0, #7
 80011a6:	1ac2      	subs	r2, r0, r3
 80011a8:	d0cc      	beq.n	8001144 <_malloc_r+0x20>
 80011aa:	1a1b      	subs	r3, r3, r0
 80011ac:	50a3      	str	r3, [r4, r2]
 80011ae:	e7c9      	b.n	8001144 <_malloc_r+0x20>
 80011b0:	4622      	mov	r2, r4
 80011b2:	6864      	ldr	r4, [r4, #4]
 80011b4:	e7cc      	b.n	8001150 <_malloc_r+0x2c>
 80011b6:	1cc4      	adds	r4, r0, #3
 80011b8:	f024 0403 	bic.w	r4, r4, #3
 80011bc:	42a0      	cmp	r0, r4
 80011be:	d0e3      	beq.n	8001188 <_malloc_r+0x64>
 80011c0:	1a21      	subs	r1, r4, r0
 80011c2:	4630      	mov	r0, r6
 80011c4:	f000 f808 	bl	80011d8 <_sbrk_r>
 80011c8:	3001      	adds	r0, #1
 80011ca:	d1dd      	bne.n	8001188 <_malloc_r+0x64>
 80011cc:	e7cf      	b.n	800116e <_malloc_r+0x4a>
 80011ce:	bf00      	nop
 80011d0:	20000088 	.word	0x20000088
 80011d4:	2000008c 	.word	0x2000008c

080011d8 <_sbrk_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4d06      	ldr	r5, [pc, #24]	; (80011f4 <_sbrk_r+0x1c>)
 80011dc:	2300      	movs	r3, #0
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	f7ff fb6a 	bl	80008bc <_sbrk>
 80011e8:	1c43      	adds	r3, r0, #1
 80011ea:	d102      	bne.n	80011f2 <_sbrk_r+0x1a>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	b103      	cbz	r3, 80011f2 <_sbrk_r+0x1a>
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	200000f0 	.word	0x200000f0

080011f8 <__sread>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	460c      	mov	r4, r1
 80011fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001200:	f000 f8a0 	bl	8001344 <_read_r>
 8001204:	2800      	cmp	r0, #0
 8001206:	bfab      	itete	ge
 8001208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800120a:	89a3      	ldrhlt	r3, [r4, #12]
 800120c:	181b      	addge	r3, r3, r0
 800120e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001212:	bfac      	ite	ge
 8001214:	6563      	strge	r3, [r4, #84]	; 0x54
 8001216:	81a3      	strhlt	r3, [r4, #12]
 8001218:	bd10      	pop	{r4, pc}

0800121a <__swrite>:
 800121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121e:	461f      	mov	r7, r3
 8001220:	898b      	ldrh	r3, [r1, #12]
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	4605      	mov	r5, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4616      	mov	r6, r2
 800122a:	d505      	bpl.n	8001238 <__swrite+0x1e>
 800122c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001230:	2302      	movs	r3, #2
 8001232:	2200      	movs	r2, #0
 8001234:	f000 f868 	bl	8001308 <_lseek_r>
 8001238:	89a3      	ldrh	r3, [r4, #12]
 800123a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800123e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	4632      	mov	r2, r6
 8001246:	463b      	mov	r3, r7
 8001248:	4628      	mov	r0, r5
 800124a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800124e:	f000 b817 	b.w	8001280 <_write_r>

08001252 <__sseek>:
 8001252:	b510      	push	{r4, lr}
 8001254:	460c      	mov	r4, r1
 8001256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125a:	f000 f855 	bl	8001308 <_lseek_r>
 800125e:	1c43      	adds	r3, r0, #1
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	bf15      	itete	ne
 8001264:	6560      	strne	r0, [r4, #84]	; 0x54
 8001266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800126a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800126e:	81a3      	strheq	r3, [r4, #12]
 8001270:	bf18      	it	ne
 8001272:	81a3      	strhne	r3, [r4, #12]
 8001274:	bd10      	pop	{r4, pc}

08001276 <__sclose>:
 8001276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127a:	f000 b813 	b.w	80012a4 <_close_r>
	...

08001280 <_write_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4d07      	ldr	r5, [pc, #28]	; (80012a0 <_write_r+0x20>)
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	2200      	movs	r2, #0
 800128c:	602a      	str	r2, [r5, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	f7ff fac7 	bl	8000822 <_write>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_write_r+0x1e>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_write_r+0x1e>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200000f0 	.word	0x200000f0

080012a4 <_close_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d06      	ldr	r5, [pc, #24]	; (80012c0 <_close_r+0x1c>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	f7ff fad3 	bl	800085a <_close>
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	d102      	bne.n	80012be <_close_r+0x1a>
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	b103      	cbz	r3, 80012be <_close_r+0x1a>
 80012bc:	6023      	str	r3, [r4, #0]
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	200000f0 	.word	0x200000f0

080012c4 <_fstat_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4d07      	ldr	r5, [pc, #28]	; (80012e4 <_fstat_r+0x20>)
 80012c8:	2300      	movs	r3, #0
 80012ca:	4604      	mov	r4, r0
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	602b      	str	r3, [r5, #0]
 80012d2:	f7ff facd 	bl	8000870 <_fstat>
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	d102      	bne.n	80012e0 <_fstat_r+0x1c>
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	b103      	cbz	r3, 80012e0 <_fstat_r+0x1c>
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
 80012e2:	bf00      	nop
 80012e4:	200000f0 	.word	0x200000f0

080012e8 <_isatty_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d06      	ldr	r5, [pc, #24]	; (8001304 <_isatty_r+0x1c>)
 80012ec:	2300      	movs	r3, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	f7ff facb 	bl	800088e <_isatty>
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	d102      	bne.n	8001302 <_isatty_r+0x1a>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	b103      	cbz	r3, 8001302 <_isatty_r+0x1a>
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	bd38      	pop	{r3, r4, r5, pc}
 8001304:	200000f0 	.word	0x200000f0

08001308 <_lseek_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4d07      	ldr	r5, [pc, #28]	; (8001328 <_lseek_r+0x20>)
 800130c:	4604      	mov	r4, r0
 800130e:	4608      	mov	r0, r1
 8001310:	4611      	mov	r1, r2
 8001312:	2200      	movs	r2, #0
 8001314:	602a      	str	r2, [r5, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	f7ff fac3 	bl	80008a2 <_lseek>
 800131c:	1c43      	adds	r3, r0, #1
 800131e:	d102      	bne.n	8001326 <_lseek_r+0x1e>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	b103      	cbz	r3, 8001326 <_lseek_r+0x1e>
 8001324:	6023      	str	r3, [r4, #0]
 8001326:	bd38      	pop	{r3, r4, r5, pc}
 8001328:	200000f0 	.word	0x200000f0

0800132c <__malloc_lock>:
 800132c:	4801      	ldr	r0, [pc, #4]	; (8001334 <__malloc_lock+0x8>)
 800132e:	f7ff be45 	b.w	8000fbc <__retarget_lock_acquire_recursive>
 8001332:	bf00      	nop
 8001334:	200000e8 	.word	0x200000e8

08001338 <__malloc_unlock>:
 8001338:	4801      	ldr	r0, [pc, #4]	; (8001340 <__malloc_unlock+0x8>)
 800133a:	f7ff be40 	b.w	8000fbe <__retarget_lock_release_recursive>
 800133e:	bf00      	nop
 8001340:	200000e8 	.word	0x200000e8

08001344 <_read_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d07      	ldr	r5, [pc, #28]	; (8001364 <_read_r+0x20>)
 8001348:	4604      	mov	r4, r0
 800134a:	4608      	mov	r0, r1
 800134c:	4611      	mov	r1, r2
 800134e:	2200      	movs	r2, #0
 8001350:	602a      	str	r2, [r5, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	f7ff fa48 	bl	80007e8 <_read>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_read_r+0x1e>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_read_r+0x1e>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200000f0 	.word	0x200000f0

08001368 <_init>:
 8001368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136a:	bf00      	nop
 800136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136e:	bc08      	pop	{r3}
 8001370:	469e      	mov	lr, r3
 8001372:	4770      	bx	lr

08001374 <_fini>:
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	bf00      	nop
 8001378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137a:	bc08      	pop	{r3}
 800137c:	469e      	mov	lr, r3
 800137e:	4770      	bx	lr

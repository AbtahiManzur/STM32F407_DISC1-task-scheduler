
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001360  08001360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800142c  0800142c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800142c  0800142c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800142c  0800142c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001430  08001430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  0800149c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800149c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002876  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007fb  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00023310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2a  00000000  00000000  000234e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ad9  00000000  00000000  00026212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009cbd  00000000  00000000  00027ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d68  00000000  00000000  000319fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001348 	.word	0x08001348

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001348 	.word	0x08001348

080001e8 <led_init_all>:
 */

#include <stdint.h>
#include "led.h"

void led_init_all(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	//First turn on the clocks for port D
	uint32_t *pRCC_AHB1ENR = (uint32_t*)0x40023830;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <led_init_all+0x54>)
 80001f0:	607b      	str	r3, [r7, #4]

	*pRCC_AHB1ENR |= (1 << 3);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0208 	orr.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]

	//Next set pins 12-15 of GPIOD to output mode
	uint32_t *pGPIOD_MODER = (uint32_t*)0x40020C00;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <led_init_all+0x58>)
 8000200:	603b      	str	r3, [r7, #0]
	*pGPIOD_MODER &= ~(0xFF000000);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGPIOD_MODER |= (0x55 << 24);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]

	led_off(LED_BLUE);
 800021a:	200f      	movs	r0, #15
 800021c:	f000 f82a 	bl	8000274 <led_off>
	led_off(LED_GREEN);
 8000220:	200c      	movs	r0, #12
 8000222:	f000 f827 	bl	8000274 <led_off>
	led_off(LED_ORANGE);
 8000226:	200d      	movs	r0, #13
 8000228:	f000 f824 	bl	8000274 <led_off>
	led_off(LED_RED);
 800022c:	200e      	movs	r0, #14
 800022e:	f000 f821 	bl	8000274 <led_off>
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40023830 	.word	0x40023830
 8000240:	40020c00 	.word	0x40020c00

08000244 <led_on>:

void led_on(uint8_t led_no) {
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOD_ODR = (uint32_t*)0x40020C14;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <led_on+0x2c>)
 8000250:	60fb      	str	r3, [r7, #12]
	*pGPIOD_ODR |= (1 << led_no);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	2101      	movs	r1, #1
 800025a:	fa01 f202 	lsl.w	r2, r1, r2
 800025e:	431a      	orrs	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	601a      	str	r2, [r3, #0]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020c14 	.word	0x40020c14

08000274 <led_off>:

void led_off(uint8_t led_no) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOD_ODR = (uint32_t*)0x40020C14;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <led_off+0x2c>)
 8000280:	60fb      	str	r3, [r7, #12]
	*pGPIOD_ODR &= ~(1 << led_no);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40020c14 	.word	0x40020c14

080002a4 <main>:
uint32_t g_tick_count;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002a8:	f000 f998 	bl	80005dc <enable_processor_faults>

	init_sched_stack(SCHED_STACK_START);
 80002ac:	4807      	ldr	r0, [pc, #28]	; (80002cc <main+0x28>)
 80002ae:	f000 f88b 	bl	80003c8 <init_sched_stack>

	init_tasks_stack();
 80002b2:	f000 f88f 	bl	80003d4 <init_tasks_stack>

	led_init_all();
 80002b6:	f7ff ff97 	bl	80001e8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 f84b 	bl	8000358 <init_systick_timer>

	switch_sp_to_psp();
 80002c2:	f000 f97d 	bl	80005c0 <switch_sp_to_psp>

	task1_handler();
 80002c6:	f000 f803 	bl	80002d0 <task1_handler>

	while(1);
 80002ca:	e7fe      	b.n	80002ca <main+0x26>
 80002cc:	2001ec00 	.word	0x2001ec00

080002d0 <task1_handler>:
}

void task1_handler(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_BLUE);
 80002d4:	200f      	movs	r0, #15
 80002d6:	f7ff ffb5 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_250MS);
		task_delay(250);
 80002da:	20fa      	movs	r0, #250	; 0xfa
 80002dc:	f000 f9ba 	bl	8000654 <task_delay>
		led_off(LED_BLUE);
 80002e0:	200f      	movs	r0, #15
 80002e2:	f7ff ffc7 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_250MS);
		task_delay(250);
 80002e6:	20fa      	movs	r0, #250	; 0xfa
 80002e8:	f000 f9b4 	bl	8000654 <task_delay>
		led_on(LED_BLUE);
 80002ec:	e7f2      	b.n	80002d4 <task1_handler+0x4>

080002ee <task2_handler>:
	}
}
void task2_handler(void) {
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_GREEN);
 80002f2:	200c      	movs	r0, #12
 80002f4:	f7ff ffa6 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_1S);
		task_delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 f9aa 	bl	8000654 <task_delay>
		led_off(LED_GREEN);
 8000300:	200c      	movs	r0, #12
 8000302:	f7ff ffb7 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_1S);
		task_delay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 f9a3 	bl	8000654 <task_delay>
		led_on(LED_GREEN);
 800030e:	e7f0      	b.n	80002f2 <task2_handler+0x4>

08000310 <task3_handler>:
	}
}
void task3_handler(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_ORANGE);
 8000314:	200d      	movs	r0, #13
 8000316:	f7ff ff95 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_500MS);
		task_delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031e:	f000 f999 	bl	8000654 <task_delay>
		led_off(LED_ORANGE);
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff ffa6 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_500MS);
		task_delay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f992 	bl	8000654 <task_delay>
		led_on(LED_ORANGE);
 8000330:	e7f0      	b.n	8000314 <task3_handler+0x4>

08000332 <task4_handler>:
	}
}
void task4_handler(void) {
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_RED);
 8000336:	200e      	movs	r0, #14
 8000338:	f7ff ff84 	bl	8000244 <led_on>
		//delay(DELAY_COUNT_125MS);
		task_delay(125);
 800033c:	207d      	movs	r0, #125	; 0x7d
 800033e:	f000 f989 	bl	8000654 <task_delay>
		led_off(LED_RED);
 8000342:	200e      	movs	r0, #14
 8000344:	f7ff ff96 	bl	8000274 <led_off>
		//delay(DELAY_COUNT_125MS);
		task_delay(125);
 8000348:	207d      	movs	r0, #125	; 0x7d
 800034a:	f000 f983 	bl	8000654 <task_delay>
		led_on(LED_RED);
 800034e:	e7f2      	b.n	8000336 <task4_handler+0x4>

08000350 <idle_task_handler>:
	}
}

void idle_task_handler(void) {
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	while(1);
 8000354:	e7fe      	b.n	8000354 <idle_task_handler+0x4>
	...

08000358 <init_systick_timer>:
}

void init_systick_timer(uint32_t tick_hz) {
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <init_systick_timer+0x64>)
 8000362:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <init_systick_timer+0x68>)
 8000366:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz - 1;
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <init_systick_timer+0x6c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	3b01      	subs	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]

	//Clear SRVR
	*pSRVR &= ~(0x00FFFFFF);
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]

	//load count into SRVR
	*pSRVR |= count_value;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	431a      	orrs	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	601a      	str	r2, [r3, #0]

	//initializations
	*pSCSR |= (1 << 1); //Enables Systick exception
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f043 0202 	orr.w	r2, r3, #2
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Uses processor clock as source
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f043 0204 	orr.w	r2, r3, #4
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	601a      	str	r2, [r3, #0]

	//enable the timer
	*pSCSR |= (1 << 0);
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f043 0201 	orr.w	r2, r3, #1
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000e014 	.word	0xe000e014
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	00f42400 	.word	0x00f42400

080003c8 <init_sched_stack>:

__attribute__((naked)) void init_sched_stack(uint32_t sched_stack_start) {
 80003c8:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_stack_start) : );
 80003ca:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003ce:	4770      	bx	lr
}
 80003d0:	bf00      	nop
	...

080003d4 <init_tasks_stack>:

void init_tasks_stack(void) {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	user_tasks[0].psp_value = IDLE_STACK_START;
 80003da:	4b3f      	ldr	r3, [pc, #252]	; (80004d8 <init_tasks_stack+0x104>)
 80003dc:	4a3f      	ldr	r2, [pc, #252]	; (80004dc <init_tasks_stack+0x108>)
 80003de:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80003e0:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <init_tasks_stack+0x104>)
 80003e2:	4a3f      	ldr	r2, [pc, #252]	; (80004e0 <init_tasks_stack+0x10c>)
 80003e4:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80003e6:	4b3c      	ldr	r3, [pc, #240]	; (80004d8 <init_tasks_stack+0x104>)
 80003e8:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <init_tasks_stack+0x110>)
 80003ea:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80003ec:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <init_tasks_stack+0x104>)
 80003ee:	4a3e      	ldr	r2, [pc, #248]	; (80004e8 <init_tasks_stack+0x114>)
 80003f0:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80003f2:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <init_tasks_stack+0x104>)
 80003f4:	4a3d      	ldr	r2, [pc, #244]	; (80004ec <init_tasks_stack+0x118>)
 80003f6:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task_handler;
 80003f8:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <init_tasks_stack+0x104>)
 80003fa:	4a3d      	ldr	r2, [pc, #244]	; (80004f0 <init_tasks_stack+0x11c>)
 80003fc:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80003fe:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <init_tasks_stack+0x104>)
 8000400:	4a3c      	ldr	r2, [pc, #240]	; (80004f4 <init_tasks_stack+0x120>)
 8000402:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000404:	4b34      	ldr	r3, [pc, #208]	; (80004d8 <init_tasks_stack+0x104>)
 8000406:	4a3c      	ldr	r2, [pc, #240]	; (80004f8 <init_tasks_stack+0x124>)
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800040a:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <init_tasks_stack+0x104>)
 800040c:	4a3b      	ldr	r2, [pc, #236]	; (80004fc <init_tasks_stack+0x128>)
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <init_tasks_stack+0x104>)
 8000412:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <init_tasks_stack+0x12c>)
 8000414:	64da      	str	r2, [r3, #76]	; 0x4c

	user_tasks[0].current_state = TASK_READY_STATE;
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <init_tasks_stack+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 800041c:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <init_tasks_stack+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <init_tasks_stack+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <init_tasks_stack+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <init_tasks_stack+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].sleep_count = 0;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <init_tasks_stack+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
	user_tasks[1].sleep_count = 0;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <init_tasks_stack+0x104>)
 8000442:	2200      	movs	r2, #0
 8000444:	615a      	str	r2, [r3, #20]
	user_tasks[2].sleep_count = 0;
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <init_tasks_stack+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
	user_tasks[3].sleep_count = 0;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <init_tasks_stack+0x104>)
 800044e:	2200      	movs	r2, #0
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
	user_tasks[4].sleep_count = 0;
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <init_tasks_stack+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	; 0x44

	for(int i = 0; i < MAX_TASKS; i++) {
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	e033      	b.n	80004c6 <init_tasks_stack+0xf2>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800045e:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <init_tasks_stack+0x104>)
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	011b      	lsls	r3, r3, #4
 8000464:	4413      	add	r3, r2
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]

		pPSP--; //XPSR
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	3b04      	subs	r3, #4
 800046e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000 to have thumb state enabled.
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000476:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3b04      	subs	r3, #4
 800047c:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <init_tasks_stack+0x104>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	4413      	add	r3, r2
 8000486:	330c      	adds	r3, #12
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b04      	subs	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
		//*pPSP = 0xFFFFFFFD; //This LR is to tell the processor to unstack using the PSP and use the PSP for thread mode.
		*pPSP = 0; //Actually it doesn't matter what the LR is since its already EXC_RETURN on exception entry.
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++) {
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e005      	b.n	80004ae <init_tasks_stack+0xda>
			pPSP--;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3b04      	subs	r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
		for(int j = 0; j < 13; j++) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3301      	adds	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b0c      	cmp	r3, #12
 80004b2:	ddf6      	ble.n	80004a2 <init_tasks_stack+0xce>
			//*pPSP = 0;
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	4908      	ldr	r1, [pc, #32]	; (80004d8 <init_tasks_stack+0x104>)
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	440b      	add	r3, r1
 80004be:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++) {
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3301      	adds	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	ddc8      	ble.n	800045e <init_tasks_stack+0x8a>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000094 	.word	0x20000094
 80004dc:	2001f000 	.word	0x2001f000
 80004e0:	20020000 	.word	0x20020000
 80004e4:	2001fc00 	.word	0x2001fc00
 80004e8:	2001f800 	.word	0x2001f800
 80004ec:	2001f400 	.word	0x2001f400
 80004f0:	08000351 	.word	0x08000351
 80004f4:	080002d1 	.word	0x080002d1
 80004f8:	080002ef 	.word	0x080002ef
 80004fc:	08000311 	.word	0x08000311
 8000500:	08000333 	.word	0x08000333

08000504 <get_current_psp>:

uint32_t get_current_psp(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <get_current_psp+0x18>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <get_current_psp+0x1c>)
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	4413      	add	r3, r2
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000000 	.word	0x20000000
 8000520:	20000094 	.word	0x20000094

08000524 <update_current_psp>:

void update_current_psp(uint32_t current_psp) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <update_current_psp+0x20>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <update_current_psp+0x24>)
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	20000000 	.word	0x20000000
 8000548:	20000094 	.word	0x20000094

0800054c <update_current_task>:

void update_current_task(void) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	e020      	b.n	800059a <update_current_task+0x4e>
		current_task++;
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <update_current_task+0x68>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <update_current_task+0x68>)
 8000560:	6013      	str	r3, [r2, #0]
		current_task %= MAX_TASKS;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <update_current_task+0x68>)
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <update_current_task+0x6c>)
 8000568:	fba3 2301 	umull	r2, r3, r3, r1
 800056c:	089a      	lsrs	r2, r3, #2
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	1aca      	subs	r2, r1, r3
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <update_current_task+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
		if((user_tasks[current_task].current_state == TASK_READY_STATE) && (current_task != 0)){
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <update_current_task+0x68>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <update_current_task+0x70>)
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	4413      	add	r3, r2
 8000584:	3308      	adds	r3, #8
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d103      	bne.n	8000594 <update_current_task+0x48>
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <update_current_task+0x68>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d109      	bne.n	80005a8 <update_current_task+0x5c>
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d9db      	bls.n	8000558 <update_current_task+0xc>
			return;
		}
	}
	current_task = 0;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <update_current_task+0x68>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e000      	b.n	80005aa <update_current_task+0x5e>
			return;
 80005a8:	bf00      	nop
}
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000
 80005b8:	cccccccd 	.word	0xcccccccd
 80005bc:	20000094 	.word	0x20000094

080005c0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void) {
	//First save the current LR to go back to main
	__asm volatile("PUSH {LR}");
 80005c0:	b500      	push	{lr}

	//Get the current task's PSP and initialize the PSP register with it
	__asm volatile("BL get_current_psp");
 80005c2:	f7ff ff9f 	bl	8000504 <get_current_psp>
	__asm volatile("MSR PSP, R0");
 80005c6:	f380 8809 	msr	PSP, r0

	//Restore LR
	__asm volatile("POP {LR}");
 80005ca:	f85d eb04 	ldr.w	lr, [sp], #4

	//Next modify bit 1 in the CONTROL register to use PSP for tasks instead of the default MSP
	__asm volatile("MOV R0, #0x000002");
 80005ce:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80005d2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80005d6:	4770      	bx	lr
}
 80005d8:	bf00      	nop
	...

080005dc <enable_processor_faults>:

void enable_processor_faults(void) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <enable_processor_faults+0x38>)
 80005e4:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16 ); //mem manage
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ); //bus fault
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ); //usage fault
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	e000ed24 	.word	0xe000ed24

08000618 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	update_global_tick();
 800061c:	f000 f880 	bl	8000720 <update_global_tick>
	unblock_tasks();
 8000620:	f000 f84e 	bl	80006c0 <unblock_tasks>
	task_yield();
 8000624:	f000 f83a 	bl	800069c <task_yield>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void) {
	//Save the EXC_RETURN since we will be branching to multiple sub-routines
	__asm volatile("PUSH {LR}");
 800062c:	b500      	push	{lr}
	//First obtain current PSP, since we can't use PUSH/POP as handler mode only uses MSP
	__asm volatile("MRS R0, PSP");
 800062e:	f3ef 8009 	mrs	r0, PSP
	//Then stack the rest of the context, R4-R11 using PSP which is located in R0
	__asm volatile("STMDB R0!, {R4-R11}");
 8000632:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Save this PSP
	__asm volatile("BL update_current_psp");
 8000636:	f7ff ff75 	bl	8000524 <update_current_psp>
	//update current task
	__asm volatile("BL update_current_task");
 800063a:	f7ff ff87 	bl	800054c <update_current_task>
	//get the PSP of this task
	__asm volatile("BL get_current_psp");
 800063e:	f7ff ff61 	bl	8000504 <get_current_psp>
	//load R4-R11 of the next task
	__asm volatile("LDMIA R0!, {R4-R11}");
 8000642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//move R0 into PSP
	__asm volatile("MSR PSP, R0");
 8000646:	f380 8809 	msr	PSP, r0
	//pop back EXC_RETURN
	__asm volatile("POP {LR}");
 800064a:	f85d eb04 	ldr.w	lr, [sp], #4
	//branch to EXC_RETURN
	__asm volatile("BX LR");
 800064e:	4770      	bx	lr
}
 8000650:	bf00      	nop
	...

08000654 <task_delay>:

void task_delay(uint32_t tick_count) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].sleep_count = g_tick_count + tick_count;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <task_delay+0x3c>)
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <task_delay+0x40>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	440a      	add	r2, r1
 8000668:	490b      	ldr	r1, [pc, #44]	; (8000698 <task_delay+0x44>)
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	440b      	add	r3, r1
 800066e:	3304      	adds	r3, #4
 8000670:	601a      	str	r2, [r3, #0]
	user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <task_delay+0x40>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <task_delay+0x44>)
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	4413      	add	r3, r2
 800067c:	3308      	adds	r3, #8
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	701a      	strb	r2, [r3, #0]
	task_yield();
 8000682:	f000 f80b 	bl	800069c <task_yield>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000090 	.word	0x20000090
 8000694:	20000000 	.word	0x20000000
 8000698:	20000094 	.word	0x20000094

0800069c <task_yield>:

void task_yield(void) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	//Pend the PendSV Handler where the context switching occurs
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <task_yield+0x20>)
 80006a4:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed04 	.word	0xe000ed04

080006c0 <unblock_tasks>:

void unblock_tasks(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	e01b      	b.n	8000704 <unblock_tasks+0x44>
		if(user_tasks[i].current_state == TASK_BLOCKED_STATE) {
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <unblock_tasks+0x58>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	3308      	adds	r3, #8
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d110      	bne.n	80006fe <unblock_tasks+0x3e>
			if(user_tasks[i].sleep_count == g_tick_count) {
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <unblock_tasks+0x58>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	4413      	add	r3, r2
 80006e4:	3304      	adds	r3, #4
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <unblock_tasks+0x5c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d106      	bne.n	80006fe <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <unblock_tasks+0x58>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	4413      	add	r3, r2
 80006f8:	3308      	adds	r3, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASKS; i++) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d9e0      	bls.n	80006cc <unblock_tasks+0xc>
			}
		}
	}
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000094 	.word	0x20000094
 800071c:	20000090 	.word	0x20000090

08000720 <update_global_tick>:

void update_global_tick(void) {
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <update_global_tick+0x18>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a03      	ldr	r2, [pc, #12]	; (8000738 <update_global_tick+0x18>)
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000090 	.word	0x20000090

0800073c <HardFault_Handler>:

void HardFault_Handler(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	printf("Exception: Hard fault\n");
 8000740:	4801      	ldr	r0, [pc, #4]	; (8000748 <HardFault_Handler+0xc>)
 8000742:	f000 f9ab 	bl	8000a9c <puts>
	while(1);
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0xa>
 8000748:	08001360 	.word	0x08001360

0800074c <MemManage_Handler>:
}

void MemManage_Handler(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	printf("Exception: Memory manage fault\n");
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <MemManage_Handler+0xc>)
 8000752:	f000 f9a3 	bl	8000a9c <puts>
	while(1);
 8000756:	e7fe      	b.n	8000756 <MemManage_Handler+0xa>
 8000758:	08001378 	.word	0x08001378

0800075c <BusFault_Handler>:
}

void BusFault_Handler(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	printf("Exception: Bus fault\n");
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <BusFault_Handler+0xc>)
 8000762:	f000 f99b 	bl	8000a9c <puts>
	while(1);
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0xa>
 8000768:	08001398 	.word	0x08001398

0800076c <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	printf("Exception: Usage fault\n");
 8000770:	4801      	ldr	r0, [pc, #4]	; (8000778 <UsageFault_Handler+0xc>)
 8000772:	f000 f993 	bl	8000a9c <puts>
	while(1);
 8000776:	e7fe      	b.n	8000776 <UsageFault_Handler+0xa>
 8000778:	080013b0 	.word	0x080013b0

0800077c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <ITM_SendChar+0x44>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <ITM_SendChar+0x44>)
 800078c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000790:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <ITM_SendChar+0x48>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <ITM_SendChar+0x48>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800079e:	bf00      	nop
 80007a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f8      	beq.n	80007a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000edfc 	.word	0xe000edfc
 80007c4:	e0000e00 	.word	0xe0000e00

080007c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00a      	b.n	80007f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007da:	f3af 8000 	nop.w
 80007de:	4601      	mov	r1, r0
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf0      	blt.n	80007da <_read+0x12>
	}

return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e009      	b.n	8000828 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ffad 	bl	800077c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf1      	blt.n	8000814 <_write+0x12>
	}
	return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_close>:

int _close(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return -1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000860:	605a      	str	r2, [r3, #4]
	return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
	return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f000 f846 	bl	800095c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000084 	.word	0x20000084
 8000904:	200000f8 	.word	0x200000f8

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800090c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f000 f817 	bl	8000968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fcb3 	bl	80002a4 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800094c:	08001434 	.word	0x08001434
  ldr r2, =_sbss
 8000950:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000954:	200000f4 	.word	0x200000f4

08000958 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <__errno>:
 800095c:	4b01      	ldr	r3, [pc, #4]	; (8000964 <__errno+0x8>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000004 	.word	0x20000004

08000968 <__libc_init_array>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4d0d      	ldr	r5, [pc, #52]	; (80009a0 <__libc_init_array+0x38>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	; (80009a4 <__libc_init_array+0x3c>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	2600      	movs	r6, #0
 8000974:	42a6      	cmp	r6, r4
 8000976:	d109      	bne.n	800098c <__libc_init_array+0x24>
 8000978:	4d0b      	ldr	r5, [pc, #44]	; (80009a8 <__libc_init_array+0x40>)
 800097a:	4c0c      	ldr	r4, [pc, #48]	; (80009ac <__libc_init_array+0x44>)
 800097c:	f000 fce4 	bl	8001348 <_init>
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	2600      	movs	r6, #0
 8000986:	42a6      	cmp	r6, r4
 8000988:	d105      	bne.n	8000996 <__libc_init_array+0x2e>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000990:	4798      	blx	r3
 8000992:	3601      	adds	r6, #1
 8000994:	e7ee      	b.n	8000974 <__libc_init_array+0xc>
 8000996:	f855 3b04 	ldr.w	r3, [r5], #4
 800099a:	4798      	blx	r3
 800099c:	3601      	adds	r6, #1
 800099e:	e7f2      	b.n	8000986 <__libc_init_array+0x1e>
 80009a0:	0800142c 	.word	0x0800142c
 80009a4:	0800142c 	.word	0x0800142c
 80009a8:	0800142c 	.word	0x0800142c
 80009ac:	08001430 	.word	0x08001430

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_puts_r>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	460e      	mov	r6, r1
 80009c4:	4605      	mov	r5, r0
 80009c6:	b118      	cbz	r0, 80009d0 <_puts_r+0x10>
 80009c8:	6983      	ldr	r3, [r0, #24]
 80009ca:	b90b      	cbnz	r3, 80009d0 <_puts_r+0x10>
 80009cc:	f000 fa48 	bl	8000e60 <__sinit>
 80009d0:	69ab      	ldr	r3, [r5, #24]
 80009d2:	68ac      	ldr	r4, [r5, #8]
 80009d4:	b913      	cbnz	r3, 80009dc <_puts_r+0x1c>
 80009d6:	4628      	mov	r0, r5
 80009d8:	f000 fa42 	bl	8000e60 <__sinit>
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <_puts_r+0xd0>)
 80009de:	429c      	cmp	r4, r3
 80009e0:	d120      	bne.n	8000a24 <_puts_r+0x64>
 80009e2:	686c      	ldr	r4, [r5, #4]
 80009e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009e6:	07db      	lsls	r3, r3, #31
 80009e8:	d405      	bmi.n	80009f6 <_puts_r+0x36>
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	0598      	lsls	r0, r3, #22
 80009ee:	d402      	bmi.n	80009f6 <_puts_r+0x36>
 80009f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009f2:	f000 fad3 	bl	8000f9c <__retarget_lock_acquire_recursive>
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	0719      	lsls	r1, r3, #28
 80009fa:	d51d      	bpl.n	8000a38 <_puts_r+0x78>
 80009fc:	6923      	ldr	r3, [r4, #16]
 80009fe:	b1db      	cbz	r3, 8000a38 <_puts_r+0x78>
 8000a00:	3e01      	subs	r6, #1
 8000a02:	68a3      	ldr	r3, [r4, #8]
 8000a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	60a3      	str	r3, [r4, #8]
 8000a0c:	bb39      	cbnz	r1, 8000a5e <_puts_r+0x9e>
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da38      	bge.n	8000a84 <_puts_r+0xc4>
 8000a12:	4622      	mov	r2, r4
 8000a14:	210a      	movs	r1, #10
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 f848 	bl	8000aac <__swbuf_r>
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	d011      	beq.n	8000a44 <_puts_r+0x84>
 8000a20:	250a      	movs	r5, #10
 8000a22:	e011      	b.n	8000a48 <_puts_r+0x88>
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <_puts_r+0xd4>)
 8000a26:	429c      	cmp	r4, r3
 8000a28:	d101      	bne.n	8000a2e <_puts_r+0x6e>
 8000a2a:	68ac      	ldr	r4, [r5, #8]
 8000a2c:	e7da      	b.n	80009e4 <_puts_r+0x24>
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <_puts_r+0xd8>)
 8000a30:	429c      	cmp	r4, r3
 8000a32:	bf08      	it	eq
 8000a34:	68ec      	ldreq	r4, [r5, #12]
 8000a36:	e7d5      	b.n	80009e4 <_puts_r+0x24>
 8000a38:	4621      	mov	r1, r4
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f000 f888 	bl	8000b50 <__swsetup_r>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d0dd      	beq.n	8000a00 <_puts_r+0x40>
 8000a44:	f04f 35ff 	mov.w	r5, #4294967295
 8000a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a4a:	07da      	lsls	r2, r3, #31
 8000a4c:	d405      	bmi.n	8000a5a <_puts_r+0x9a>
 8000a4e:	89a3      	ldrh	r3, [r4, #12]
 8000a50:	059b      	lsls	r3, r3, #22
 8000a52:	d402      	bmi.n	8000a5a <_puts_r+0x9a>
 8000a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a56:	f000 faa2 	bl	8000f9e <__retarget_lock_release_recursive>
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da04      	bge.n	8000a6c <_puts_r+0xac>
 8000a62:	69a2      	ldr	r2, [r4, #24]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dc06      	bgt.n	8000a76 <_puts_r+0xb6>
 8000a68:	290a      	cmp	r1, #10
 8000a6a:	d004      	beq.n	8000a76 <_puts_r+0xb6>
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	6022      	str	r2, [r4, #0]
 8000a72:	7019      	strb	r1, [r3, #0]
 8000a74:	e7c5      	b.n	8000a02 <_puts_r+0x42>
 8000a76:	4622      	mov	r2, r4
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f000 f817 	bl	8000aac <__swbuf_r>
 8000a7e:	3001      	adds	r0, #1
 8000a80:	d1bf      	bne.n	8000a02 <_puts_r+0x42>
 8000a82:	e7df      	b.n	8000a44 <_puts_r+0x84>
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	250a      	movs	r5, #10
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	6022      	str	r2, [r4, #0]
 8000a8c:	701d      	strb	r5, [r3, #0]
 8000a8e:	e7db      	b.n	8000a48 <_puts_r+0x88>
 8000a90:	080013ec 	.word	0x080013ec
 8000a94:	0800140c 	.word	0x0800140c
 8000a98:	080013cc 	.word	0x080013cc

08000a9c <puts>:
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <puts+0xc>)
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	f7ff bf8d 	b.w	80009c0 <_puts_r>
 8000aa6:	bf00      	nop
 8000aa8:	20000004 	.word	0x20000004

08000aac <__swbuf_r>:
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	460e      	mov	r6, r1
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	4605      	mov	r5, r0
 8000ab4:	b118      	cbz	r0, 8000abe <__swbuf_r+0x12>
 8000ab6:	6983      	ldr	r3, [r0, #24]
 8000ab8:	b90b      	cbnz	r3, 8000abe <__swbuf_r+0x12>
 8000aba:	f000 f9d1 	bl	8000e60 <__sinit>
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <__swbuf_r+0x98>)
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	d12b      	bne.n	8000b1c <__swbuf_r+0x70>
 8000ac4:	686c      	ldr	r4, [r5, #4]
 8000ac6:	69a3      	ldr	r3, [r4, #24]
 8000ac8:	60a3      	str	r3, [r4, #8]
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	071a      	lsls	r2, r3, #28
 8000ace:	d52f      	bpl.n	8000b30 <__swbuf_r+0x84>
 8000ad0:	6923      	ldr	r3, [r4, #16]
 8000ad2:	b36b      	cbz	r3, 8000b30 <__swbuf_r+0x84>
 8000ad4:	6923      	ldr	r3, [r4, #16]
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	1ac0      	subs	r0, r0, r3
 8000ada:	6963      	ldr	r3, [r4, #20]
 8000adc:	b2f6      	uxtb	r6, r6
 8000ade:	4283      	cmp	r3, r0
 8000ae0:	4637      	mov	r7, r6
 8000ae2:	dc04      	bgt.n	8000aee <__swbuf_r+0x42>
 8000ae4:	4621      	mov	r1, r4
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f000 f926 	bl	8000d38 <_fflush_r>
 8000aec:	bb30      	cbnz	r0, 8000b3c <__swbuf_r+0x90>
 8000aee:	68a3      	ldr	r3, [r4, #8]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	60a3      	str	r3, [r4, #8]
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	6022      	str	r2, [r4, #0]
 8000afa:	701e      	strb	r6, [r3, #0]
 8000afc:	6963      	ldr	r3, [r4, #20]
 8000afe:	3001      	adds	r0, #1
 8000b00:	4283      	cmp	r3, r0
 8000b02:	d004      	beq.n	8000b0e <__swbuf_r+0x62>
 8000b04:	89a3      	ldrh	r3, [r4, #12]
 8000b06:	07db      	lsls	r3, r3, #31
 8000b08:	d506      	bpl.n	8000b18 <__swbuf_r+0x6c>
 8000b0a:	2e0a      	cmp	r6, #10
 8000b0c:	d104      	bne.n	8000b18 <__swbuf_r+0x6c>
 8000b0e:	4621      	mov	r1, r4
 8000b10:	4628      	mov	r0, r5
 8000b12:	f000 f911 	bl	8000d38 <_fflush_r>
 8000b16:	b988      	cbnz	r0, 8000b3c <__swbuf_r+0x90>
 8000b18:	4638      	mov	r0, r7
 8000b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <__swbuf_r+0x9c>)
 8000b1e:	429c      	cmp	r4, r3
 8000b20:	d101      	bne.n	8000b26 <__swbuf_r+0x7a>
 8000b22:	68ac      	ldr	r4, [r5, #8]
 8000b24:	e7cf      	b.n	8000ac6 <__swbuf_r+0x1a>
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <__swbuf_r+0xa0>)
 8000b28:	429c      	cmp	r4, r3
 8000b2a:	bf08      	it	eq
 8000b2c:	68ec      	ldreq	r4, [r5, #12]
 8000b2e:	e7ca      	b.n	8000ac6 <__swbuf_r+0x1a>
 8000b30:	4621      	mov	r1, r4
 8000b32:	4628      	mov	r0, r5
 8000b34:	f000 f80c 	bl	8000b50 <__swsetup_r>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d0cb      	beq.n	8000ad4 <__swbuf_r+0x28>
 8000b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8000b40:	e7ea      	b.n	8000b18 <__swbuf_r+0x6c>
 8000b42:	bf00      	nop
 8000b44:	080013ec 	.word	0x080013ec
 8000b48:	0800140c 	.word	0x0800140c
 8000b4c:	080013cc 	.word	0x080013cc

08000b50 <__swsetup_r>:
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <__swsetup_r+0xcc>)
 8000b52:	b570      	push	{r4, r5, r6, lr}
 8000b54:	681d      	ldr	r5, [r3, #0]
 8000b56:	4606      	mov	r6, r0
 8000b58:	460c      	mov	r4, r1
 8000b5a:	b125      	cbz	r5, 8000b66 <__swsetup_r+0x16>
 8000b5c:	69ab      	ldr	r3, [r5, #24]
 8000b5e:	b913      	cbnz	r3, 8000b66 <__swsetup_r+0x16>
 8000b60:	4628      	mov	r0, r5
 8000b62:	f000 f97d 	bl	8000e60 <__sinit>
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <__swsetup_r+0xd0>)
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	d10f      	bne.n	8000b8c <__swsetup_r+0x3c>
 8000b6c:	686c      	ldr	r4, [r5, #4]
 8000b6e:	89a3      	ldrh	r3, [r4, #12]
 8000b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b74:	0719      	lsls	r1, r3, #28
 8000b76:	d42c      	bmi.n	8000bd2 <__swsetup_r+0x82>
 8000b78:	06dd      	lsls	r5, r3, #27
 8000b7a:	d411      	bmi.n	8000ba0 <__swsetup_r+0x50>
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	6033      	str	r3, [r6, #0]
 8000b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b84:	81a3      	strh	r3, [r4, #12]
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8a:	e03e      	b.n	8000c0a <__swsetup_r+0xba>
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <__swsetup_r+0xd4>)
 8000b8e:	429c      	cmp	r4, r3
 8000b90:	d101      	bne.n	8000b96 <__swsetup_r+0x46>
 8000b92:	68ac      	ldr	r4, [r5, #8]
 8000b94:	e7eb      	b.n	8000b6e <__swsetup_r+0x1e>
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <__swsetup_r+0xd8>)
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	bf08      	it	eq
 8000b9c:	68ec      	ldreq	r4, [r5, #12]
 8000b9e:	e7e6      	b.n	8000b6e <__swsetup_r+0x1e>
 8000ba0:	0758      	lsls	r0, r3, #29
 8000ba2:	d512      	bpl.n	8000bca <__swsetup_r+0x7a>
 8000ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ba6:	b141      	cbz	r1, 8000bba <__swsetup_r+0x6a>
 8000ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d002      	beq.n	8000bb6 <__swsetup_r+0x66>
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f000 fa59 	bl	8001068 <_free_r>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8000bba:	89a3      	ldrh	r3, [r4, #12]
 8000bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bc0:	81a3      	strh	r3, [r4, #12]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	6063      	str	r3, [r4, #4]
 8000bc6:	6923      	ldr	r3, [r4, #16]
 8000bc8:	6023      	str	r3, [r4, #0]
 8000bca:	89a3      	ldrh	r3, [r4, #12]
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	81a3      	strh	r3, [r4, #12]
 8000bd2:	6923      	ldr	r3, [r4, #16]
 8000bd4:	b94b      	cbnz	r3, 8000bea <__swsetup_r+0x9a>
 8000bd6:	89a3      	ldrh	r3, [r4, #12]
 8000bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be0:	d003      	beq.n	8000bea <__swsetup_r+0x9a>
 8000be2:	4621      	mov	r1, r4
 8000be4:	4630      	mov	r0, r6
 8000be6:	f000 f9ff 	bl	8000fe8 <__smakebuf_r>
 8000bea:	89a0      	ldrh	r0, [r4, #12]
 8000bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bf0:	f010 0301 	ands.w	r3, r0, #1
 8000bf4:	d00a      	beq.n	8000c0c <__swsetup_r+0xbc>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60a3      	str	r3, [r4, #8]
 8000bfa:	6963      	ldr	r3, [r4, #20]
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	61a3      	str	r3, [r4, #24]
 8000c00:	6923      	ldr	r3, [r4, #16]
 8000c02:	b943      	cbnz	r3, 8000c16 <__swsetup_r+0xc6>
 8000c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c08:	d1ba      	bne.n	8000b80 <__swsetup_r+0x30>
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	0781      	lsls	r1, r0, #30
 8000c0e:	bf58      	it	pl
 8000c10:	6963      	ldrpl	r3, [r4, #20]
 8000c12:	60a3      	str	r3, [r4, #8]
 8000c14:	e7f4      	b.n	8000c00 <__swsetup_r+0xb0>
 8000c16:	2000      	movs	r0, #0
 8000c18:	e7f7      	b.n	8000c0a <__swsetup_r+0xba>
 8000c1a:	bf00      	nop
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	080013ec 	.word	0x080013ec
 8000c24:	0800140c 	.word	0x0800140c
 8000c28:	080013cc 	.word	0x080013cc

08000c2c <__sflush_r>:
 8000c2c:	898a      	ldrh	r2, [r1, #12]
 8000c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c32:	4605      	mov	r5, r0
 8000c34:	0710      	lsls	r0, r2, #28
 8000c36:	460c      	mov	r4, r1
 8000c38:	d458      	bmi.n	8000cec <__sflush_r+0xc0>
 8000c3a:	684b      	ldr	r3, [r1, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dc05      	bgt.n	8000c4c <__sflush_r+0x20>
 8000c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dc02      	bgt.n	8000c4c <__sflush_r+0x20>
 8000c46:	2000      	movs	r0, #0
 8000c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d0f9      	beq.n	8000c46 <__sflush_r+0x1a>
 8000c52:	2300      	movs	r3, #0
 8000c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c58:	682f      	ldr	r7, [r5, #0]
 8000c5a:	602b      	str	r3, [r5, #0]
 8000c5c:	d032      	beq.n	8000cc4 <__sflush_r+0x98>
 8000c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c60:	89a3      	ldrh	r3, [r4, #12]
 8000c62:	075a      	lsls	r2, r3, #29
 8000c64:	d505      	bpl.n	8000c72 <__sflush_r+0x46>
 8000c66:	6863      	ldr	r3, [r4, #4]
 8000c68:	1ac0      	subs	r0, r0, r3
 8000c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c6c:	b10b      	cbz	r3, 8000c72 <__sflush_r+0x46>
 8000c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c70:	1ac0      	subs	r0, r0, r3
 8000c72:	2300      	movs	r3, #0
 8000c74:	4602      	mov	r2, r0
 8000c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c78:	6a21      	ldr	r1, [r4, #32]
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	47b0      	blx	r6
 8000c7e:	1c43      	adds	r3, r0, #1
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	d106      	bne.n	8000c92 <__sflush_r+0x66>
 8000c84:	6829      	ldr	r1, [r5, #0]
 8000c86:	291d      	cmp	r1, #29
 8000c88:	d82c      	bhi.n	8000ce4 <__sflush_r+0xb8>
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <__sflush_r+0x108>)
 8000c8c:	40ca      	lsrs	r2, r1
 8000c8e:	07d6      	lsls	r6, r2, #31
 8000c90:	d528      	bpl.n	8000ce4 <__sflush_r+0xb8>
 8000c92:	2200      	movs	r2, #0
 8000c94:	6062      	str	r2, [r4, #4]
 8000c96:	04d9      	lsls	r1, r3, #19
 8000c98:	6922      	ldr	r2, [r4, #16]
 8000c9a:	6022      	str	r2, [r4, #0]
 8000c9c:	d504      	bpl.n	8000ca8 <__sflush_r+0x7c>
 8000c9e:	1c42      	adds	r2, r0, #1
 8000ca0:	d101      	bne.n	8000ca6 <__sflush_r+0x7a>
 8000ca2:	682b      	ldr	r3, [r5, #0]
 8000ca4:	b903      	cbnz	r3, 8000ca8 <__sflush_r+0x7c>
 8000ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000caa:	602f      	str	r7, [r5, #0]
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d0ca      	beq.n	8000c46 <__sflush_r+0x1a>
 8000cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d002      	beq.n	8000cbe <__sflush_r+0x92>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f000 f9d5 	bl	8001068 <_free_r>
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8000cc2:	e7c1      	b.n	8000c48 <__sflush_r+0x1c>
 8000cc4:	6a21      	ldr	r1, [r4, #32]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4628      	mov	r0, r5
 8000cca:	47b0      	blx	r6
 8000ccc:	1c41      	adds	r1, r0, #1
 8000cce:	d1c7      	bne.n	8000c60 <__sflush_r+0x34>
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0c4      	beq.n	8000c60 <__sflush_r+0x34>
 8000cd6:	2b1d      	cmp	r3, #29
 8000cd8:	d001      	beq.n	8000cde <__sflush_r+0xb2>
 8000cda:	2b16      	cmp	r3, #22
 8000cdc:	d101      	bne.n	8000ce2 <__sflush_r+0xb6>
 8000cde:	602f      	str	r7, [r5, #0]
 8000ce0:	e7b1      	b.n	8000c46 <__sflush_r+0x1a>
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	81a3      	strh	r3, [r4, #12]
 8000cea:	e7ad      	b.n	8000c48 <__sflush_r+0x1c>
 8000cec:	690f      	ldr	r7, [r1, #16]
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d0a9      	beq.n	8000c46 <__sflush_r+0x1a>
 8000cf2:	0793      	lsls	r3, r2, #30
 8000cf4:	680e      	ldr	r6, [r1, #0]
 8000cf6:	bf08      	it	eq
 8000cf8:	694b      	ldreq	r3, [r1, #20]
 8000cfa:	600f      	str	r7, [r1, #0]
 8000cfc:	bf18      	it	ne
 8000cfe:	2300      	movne	r3, #0
 8000d00:	eba6 0807 	sub.w	r8, r6, r7
 8000d04:	608b      	str	r3, [r1, #8]
 8000d06:	f1b8 0f00 	cmp.w	r8, #0
 8000d0a:	dd9c      	ble.n	8000c46 <__sflush_r+0x1a>
 8000d0c:	6a21      	ldr	r1, [r4, #32]
 8000d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d10:	4643      	mov	r3, r8
 8000d12:	463a      	mov	r2, r7
 8000d14:	4628      	mov	r0, r5
 8000d16:	47b0      	blx	r6
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	dc06      	bgt.n	8000d2a <__sflush_r+0xfe>
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d22:	81a3      	strh	r3, [r4, #12]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	e78e      	b.n	8000c48 <__sflush_r+0x1c>
 8000d2a:	4407      	add	r7, r0
 8000d2c:	eba8 0800 	sub.w	r8, r8, r0
 8000d30:	e7e9      	b.n	8000d06 <__sflush_r+0xda>
 8000d32:	bf00      	nop
 8000d34:	20400001 	.word	0x20400001

08000d38 <_fflush_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	690b      	ldr	r3, [r1, #16]
 8000d3c:	4605      	mov	r5, r0
 8000d3e:	460c      	mov	r4, r1
 8000d40:	b913      	cbnz	r3, 8000d48 <_fflush_r+0x10>
 8000d42:	2500      	movs	r5, #0
 8000d44:	4628      	mov	r0, r5
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
 8000d48:	b118      	cbz	r0, 8000d52 <_fflush_r+0x1a>
 8000d4a:	6983      	ldr	r3, [r0, #24]
 8000d4c:	b90b      	cbnz	r3, 8000d52 <_fflush_r+0x1a>
 8000d4e:	f000 f887 	bl	8000e60 <__sinit>
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <_fflush_r+0x6c>)
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d11b      	bne.n	8000d90 <_fflush_r+0x58>
 8000d58:	686c      	ldr	r4, [r5, #4]
 8000d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0ef      	beq.n	8000d42 <_fflush_r+0xa>
 8000d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d64:	07d0      	lsls	r0, r2, #31
 8000d66:	d404      	bmi.n	8000d72 <_fflush_r+0x3a>
 8000d68:	0599      	lsls	r1, r3, #22
 8000d6a:	d402      	bmi.n	8000d72 <_fflush_r+0x3a>
 8000d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d6e:	f000 f915 	bl	8000f9c <__retarget_lock_acquire_recursive>
 8000d72:	4628      	mov	r0, r5
 8000d74:	4621      	mov	r1, r4
 8000d76:	f7ff ff59 	bl	8000c2c <__sflush_r>
 8000d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d7c:	07da      	lsls	r2, r3, #31
 8000d7e:	4605      	mov	r5, r0
 8000d80:	d4e0      	bmi.n	8000d44 <_fflush_r+0xc>
 8000d82:	89a3      	ldrh	r3, [r4, #12]
 8000d84:	059b      	lsls	r3, r3, #22
 8000d86:	d4dd      	bmi.n	8000d44 <_fflush_r+0xc>
 8000d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d8a:	f000 f908 	bl	8000f9e <__retarget_lock_release_recursive>
 8000d8e:	e7d9      	b.n	8000d44 <_fflush_r+0xc>
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <_fflush_r+0x70>)
 8000d92:	429c      	cmp	r4, r3
 8000d94:	d101      	bne.n	8000d9a <_fflush_r+0x62>
 8000d96:	68ac      	ldr	r4, [r5, #8]
 8000d98:	e7df      	b.n	8000d5a <_fflush_r+0x22>
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <_fflush_r+0x74>)
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	bf08      	it	eq
 8000da0:	68ec      	ldreq	r4, [r5, #12]
 8000da2:	e7da      	b.n	8000d5a <_fflush_r+0x22>
 8000da4:	080013ec 	.word	0x080013ec
 8000da8:	0800140c 	.word	0x0800140c
 8000dac:	080013cc 	.word	0x080013cc

08000db0 <std>:
 8000db0:	2300      	movs	r3, #0
 8000db2:	b510      	push	{r4, lr}
 8000db4:	4604      	mov	r4, r0
 8000db6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dbe:	6083      	str	r3, [r0, #8]
 8000dc0:	8181      	strh	r1, [r0, #12]
 8000dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8000dc4:	81c2      	strh	r2, [r0, #14]
 8000dc6:	6183      	str	r3, [r0, #24]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2208      	movs	r2, #8
 8000dcc:	305c      	adds	r0, #92	; 0x5c
 8000dce:	f7ff fdef 	bl	80009b0 <memset>
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <std+0x38>)
 8000dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <std+0x3c>)
 8000dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <std+0x40>)
 8000ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <std+0x44>)
 8000de0:	6224      	str	r4, [r4, #32]
 8000de2:	6323      	str	r3, [r4, #48]	; 0x30
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	bf00      	nop
 8000de8:	080011d9 	.word	0x080011d9
 8000dec:	080011fb 	.word	0x080011fb
 8000df0:	08001233 	.word	0x08001233
 8000df4:	08001257 	.word	0x08001257

08000df8 <_cleanup_r>:
 8000df8:	4901      	ldr	r1, [pc, #4]	; (8000e00 <_cleanup_r+0x8>)
 8000dfa:	f000 b8af 	b.w	8000f5c <_fwalk_reent>
 8000dfe:	bf00      	nop
 8000e00:	08000d39 	.word	0x08000d39

08000e04 <__sfmoreglue>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	1e4a      	subs	r2, r1, #1
 8000e08:	2568      	movs	r5, #104	; 0x68
 8000e0a:	4355      	muls	r5, r2
 8000e0c:	460e      	mov	r6, r1
 8000e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e12:	f000 f977 	bl	8001104 <_malloc_r>
 8000e16:	4604      	mov	r4, r0
 8000e18:	b140      	cbz	r0, 8000e2c <__sfmoreglue+0x28>
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8000e20:	300c      	adds	r0, #12
 8000e22:	60a0      	str	r0, [r4, #8]
 8000e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e28:	f7ff fdc2 	bl	80009b0 <memset>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}

08000e30 <__sfp_lock_acquire>:
 8000e30:	4801      	ldr	r0, [pc, #4]	; (8000e38 <__sfp_lock_acquire+0x8>)
 8000e32:	f000 b8b3 	b.w	8000f9c <__retarget_lock_acquire_recursive>
 8000e36:	bf00      	nop
 8000e38:	200000ec 	.word	0x200000ec

08000e3c <__sfp_lock_release>:
 8000e3c:	4801      	ldr	r0, [pc, #4]	; (8000e44 <__sfp_lock_release+0x8>)
 8000e3e:	f000 b8ae 	b.w	8000f9e <__retarget_lock_release_recursive>
 8000e42:	bf00      	nop
 8000e44:	200000ec 	.word	0x200000ec

08000e48 <__sinit_lock_acquire>:
 8000e48:	4801      	ldr	r0, [pc, #4]	; (8000e50 <__sinit_lock_acquire+0x8>)
 8000e4a:	f000 b8a7 	b.w	8000f9c <__retarget_lock_acquire_recursive>
 8000e4e:	bf00      	nop
 8000e50:	200000e7 	.word	0x200000e7

08000e54 <__sinit_lock_release>:
 8000e54:	4801      	ldr	r0, [pc, #4]	; (8000e5c <__sinit_lock_release+0x8>)
 8000e56:	f000 b8a2 	b.w	8000f9e <__retarget_lock_release_recursive>
 8000e5a:	bf00      	nop
 8000e5c:	200000e7 	.word	0x200000e7

08000e60 <__sinit>:
 8000e60:	b510      	push	{r4, lr}
 8000e62:	4604      	mov	r4, r0
 8000e64:	f7ff fff0 	bl	8000e48 <__sinit_lock_acquire>
 8000e68:	69a3      	ldr	r3, [r4, #24]
 8000e6a:	b11b      	cbz	r3, 8000e74 <__sinit+0x14>
 8000e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e70:	f7ff bff0 	b.w	8000e54 <__sinit_lock_release>
 8000e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e78:	6523      	str	r3, [r4, #80]	; 0x50
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <__sinit+0x68>)
 8000e7c:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <__sinit+0x6c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	bf04      	itt	eq
 8000e86:	2301      	moveq	r3, #1
 8000e88:	61a3      	streq	r3, [r4, #24]
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f000 f820 	bl	8000ed0 <__sfp>
 8000e90:	6060      	str	r0, [r4, #4]
 8000e92:	4620      	mov	r0, r4
 8000e94:	f000 f81c 	bl	8000ed0 <__sfp>
 8000e98:	60a0      	str	r0, [r4, #8]
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f818 	bl	8000ed0 <__sfp>
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60e0      	str	r0, [r4, #12]
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	6860      	ldr	r0, [r4, #4]
 8000ea8:	f7ff ff82 	bl	8000db0 <std>
 8000eac:	68a0      	ldr	r0, [r4, #8]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2109      	movs	r1, #9
 8000eb2:	f7ff ff7d 	bl	8000db0 <std>
 8000eb6:	68e0      	ldr	r0, [r4, #12]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	2112      	movs	r1, #18
 8000ebc:	f7ff ff78 	bl	8000db0 <std>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61a3      	str	r3, [r4, #24]
 8000ec4:	e7d2      	b.n	8000e6c <__sinit+0xc>
 8000ec6:	bf00      	nop
 8000ec8:	080013c8 	.word	0x080013c8
 8000ecc:	08000df9 	.word	0x08000df9

08000ed0 <__sfp>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	4607      	mov	r7, r0
 8000ed4:	f7ff ffac 	bl	8000e30 <__sfp_lock_acquire>
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <__sfp+0x84>)
 8000eda:	681e      	ldr	r6, [r3, #0]
 8000edc:	69b3      	ldr	r3, [r6, #24]
 8000ede:	b913      	cbnz	r3, 8000ee6 <__sfp+0x16>
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff ffbd 	bl	8000e60 <__sinit>
 8000ee6:	3648      	adds	r6, #72	; 0x48
 8000ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	d503      	bpl.n	8000ef8 <__sfp+0x28>
 8000ef0:	6833      	ldr	r3, [r6, #0]
 8000ef2:	b30b      	cbz	r3, 8000f38 <__sfp+0x68>
 8000ef4:	6836      	ldr	r6, [r6, #0]
 8000ef6:	e7f7      	b.n	8000ee8 <__sfp+0x18>
 8000ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000efc:	b9d5      	cbnz	r5, 8000f34 <__sfp+0x64>
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <__sfp+0x88>)
 8000f00:	60e3      	str	r3, [r4, #12]
 8000f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f06:	6665      	str	r5, [r4, #100]	; 0x64
 8000f08:	f000 f847 	bl	8000f9a <__retarget_lock_init_recursive>
 8000f0c:	f7ff ff96 	bl	8000e3c <__sfp_lock_release>
 8000f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f18:	6025      	str	r5, [r4, #0]
 8000f1a:	61a5      	str	r5, [r4, #24]
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f24:	f7ff fd44 	bl	80009b0 <memset>
 8000f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f30:	4620      	mov	r0, r4
 8000f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f34:	3468      	adds	r4, #104	; 0x68
 8000f36:	e7d9      	b.n	8000eec <__sfp+0x1c>
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f7ff ff62 	bl	8000e04 <__sfmoreglue>
 8000f40:	4604      	mov	r4, r0
 8000f42:	6030      	str	r0, [r6, #0]
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1d5      	bne.n	8000ef4 <__sfp+0x24>
 8000f48:	f7ff ff78 	bl	8000e3c <__sfp_lock_release>
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	e7ee      	b.n	8000f30 <__sfp+0x60>
 8000f52:	bf00      	nop
 8000f54:	080013c8 	.word	0x080013c8
 8000f58:	ffff0001 	.word	0xffff0001

08000f5c <_fwalk_reent>:
 8000f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f60:	4606      	mov	r6, r0
 8000f62:	4688      	mov	r8, r1
 8000f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f68:	2700      	movs	r7, #0
 8000f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8000f72:	d505      	bpl.n	8000f80 <_fwalk_reent+0x24>
 8000f74:	6824      	ldr	r4, [r4, #0]
 8000f76:	2c00      	cmp	r4, #0
 8000f78:	d1f7      	bne.n	8000f6a <_fwalk_reent+0xe>
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f80:	89ab      	ldrh	r3, [r5, #12]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d907      	bls.n	8000f96 <_fwalk_reent+0x3a>
 8000f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	d003      	beq.n	8000f96 <_fwalk_reent+0x3a>
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4630      	mov	r0, r6
 8000f92:	47c0      	blx	r8
 8000f94:	4307      	orrs	r7, r0
 8000f96:	3568      	adds	r5, #104	; 0x68
 8000f98:	e7e9      	b.n	8000f6e <_fwalk_reent+0x12>

08000f9a <__retarget_lock_init_recursive>:
 8000f9a:	4770      	bx	lr

08000f9c <__retarget_lock_acquire_recursive>:
 8000f9c:	4770      	bx	lr

08000f9e <__retarget_lock_release_recursive>:
 8000f9e:	4770      	bx	lr

08000fa0 <__swhatbuf_r>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	460e      	mov	r6, r1
 8000fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	b096      	sub	sp, #88	; 0x58
 8000fac:	4614      	mov	r4, r2
 8000fae:	461d      	mov	r5, r3
 8000fb0:	da07      	bge.n	8000fc2 <__swhatbuf_r+0x22>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	89b3      	ldrh	r3, [r6, #12]
 8000fb8:	061a      	lsls	r2, r3, #24
 8000fba:	d410      	bmi.n	8000fde <__swhatbuf_r+0x3e>
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	e00e      	b.n	8000fe0 <__swhatbuf_r+0x40>
 8000fc2:	466a      	mov	r2, sp
 8000fc4:	f000 f96e 	bl	80012a4 <_fstat_r>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	dbf2      	blt.n	8000fb2 <__swhatbuf_r+0x12>
 8000fcc:	9a01      	ldr	r2, [sp, #4]
 8000fce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fd6:	425a      	negs	r2, r3
 8000fd8:	415a      	adcs	r2, r3
 8000fda:	602a      	str	r2, [r5, #0]
 8000fdc:	e7ee      	b.n	8000fbc <__swhatbuf_r+0x1c>
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	6023      	str	r3, [r4, #0]
 8000fe4:	b016      	add	sp, #88	; 0x58
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}

08000fe8 <__smakebuf_r>:
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fec:	079d      	lsls	r5, r3, #30
 8000fee:	4606      	mov	r6, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	d507      	bpl.n	8001004 <__smakebuf_r+0x1c>
 8000ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	6123      	str	r3, [r4, #16]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	6163      	str	r3, [r4, #20]
 8001000:	b002      	add	sp, #8
 8001002:	bd70      	pop	{r4, r5, r6, pc}
 8001004:	ab01      	add	r3, sp, #4
 8001006:	466a      	mov	r2, sp
 8001008:	f7ff ffca 	bl	8000fa0 <__swhatbuf_r>
 800100c:	9900      	ldr	r1, [sp, #0]
 800100e:	4605      	mov	r5, r0
 8001010:	4630      	mov	r0, r6
 8001012:	f000 f877 	bl	8001104 <_malloc_r>
 8001016:	b948      	cbnz	r0, 800102c <__smakebuf_r+0x44>
 8001018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800101c:	059a      	lsls	r2, r3, #22
 800101e:	d4ef      	bmi.n	8001000 <__smakebuf_r+0x18>
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	e7e3      	b.n	8000ff4 <__smakebuf_r+0xc>
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <__smakebuf_r+0x7c>)
 800102e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001030:	89a3      	ldrh	r3, [r4, #12]
 8001032:	6020      	str	r0, [r4, #0]
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	81a3      	strh	r3, [r4, #12]
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	6163      	str	r3, [r4, #20]
 800103e:	9b01      	ldr	r3, [sp, #4]
 8001040:	6120      	str	r0, [r4, #16]
 8001042:	b15b      	cbz	r3, 800105c <__smakebuf_r+0x74>
 8001044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001048:	4630      	mov	r0, r6
 800104a:	f000 f93d 	bl	80012c8 <_isatty_r>
 800104e:	b128      	cbz	r0, 800105c <__smakebuf_r+0x74>
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	81a3      	strh	r3, [r4, #12]
 800105c:	89a0      	ldrh	r0, [r4, #12]
 800105e:	4305      	orrs	r5, r0
 8001060:	81a5      	strh	r5, [r4, #12]
 8001062:	e7cd      	b.n	8001000 <__smakebuf_r+0x18>
 8001064:	08000df9 	.word	0x08000df9

08001068 <_free_r>:
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	4605      	mov	r5, r0
 800106c:	2900      	cmp	r1, #0
 800106e:	d045      	beq.n	80010fc <_free_r+0x94>
 8001070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001074:	1f0c      	subs	r4, r1, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	bfb8      	it	lt
 800107a:	18e4      	addlt	r4, r4, r3
 800107c:	f000 f946 	bl	800130c <__malloc_lock>
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <_free_r+0x98>)
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	4610      	mov	r0, r2
 8001086:	b933      	cbnz	r3, 8001096 <_free_r+0x2e>
 8001088:	6063      	str	r3, [r4, #4]
 800108a:	6014      	str	r4, [r2, #0]
 800108c:	4628      	mov	r0, r5
 800108e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001092:	f000 b941 	b.w	8001318 <__malloc_unlock>
 8001096:	42a3      	cmp	r3, r4
 8001098:	d90b      	bls.n	80010b2 <_free_r+0x4a>
 800109a:	6821      	ldr	r1, [r4, #0]
 800109c:	1862      	adds	r2, r4, r1
 800109e:	4293      	cmp	r3, r2
 80010a0:	bf04      	itt	eq
 80010a2:	681a      	ldreq	r2, [r3, #0]
 80010a4:	685b      	ldreq	r3, [r3, #4]
 80010a6:	6063      	str	r3, [r4, #4]
 80010a8:	bf04      	itt	eq
 80010aa:	1852      	addeq	r2, r2, r1
 80010ac:	6022      	streq	r2, [r4, #0]
 80010ae:	6004      	str	r4, [r0, #0]
 80010b0:	e7ec      	b.n	800108c <_free_r+0x24>
 80010b2:	461a      	mov	r2, r3
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b10b      	cbz	r3, 80010bc <_free_r+0x54>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d9fa      	bls.n	80010b2 <_free_r+0x4a>
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	1850      	adds	r0, r2, r1
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d10b      	bne.n	80010dc <_free_r+0x74>
 80010c4:	6820      	ldr	r0, [r4, #0]
 80010c6:	4401      	add	r1, r0
 80010c8:	1850      	adds	r0, r2, r1
 80010ca:	4283      	cmp	r3, r0
 80010cc:	6011      	str	r1, [r2, #0]
 80010ce:	d1dd      	bne.n	800108c <_free_r+0x24>
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	6053      	str	r3, [r2, #4]
 80010d6:	4401      	add	r1, r0
 80010d8:	6011      	str	r1, [r2, #0]
 80010da:	e7d7      	b.n	800108c <_free_r+0x24>
 80010dc:	d902      	bls.n	80010e4 <_free_r+0x7c>
 80010de:	230c      	movs	r3, #12
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	e7d3      	b.n	800108c <_free_r+0x24>
 80010e4:	6820      	ldr	r0, [r4, #0]
 80010e6:	1821      	adds	r1, r4, r0
 80010e8:	428b      	cmp	r3, r1
 80010ea:	bf04      	itt	eq
 80010ec:	6819      	ldreq	r1, [r3, #0]
 80010ee:	685b      	ldreq	r3, [r3, #4]
 80010f0:	6063      	str	r3, [r4, #4]
 80010f2:	bf04      	itt	eq
 80010f4:	1809      	addeq	r1, r1, r0
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	6054      	str	r4, [r2, #4]
 80010fa:	e7c7      	b.n	800108c <_free_r+0x24>
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	20000088 	.word	0x20000088

08001104 <_malloc_r>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	1ccd      	adds	r5, r1, #3
 8001108:	f025 0503 	bic.w	r5, r5, #3
 800110c:	3508      	adds	r5, #8
 800110e:	2d0c      	cmp	r5, #12
 8001110:	bf38      	it	cc
 8001112:	250c      	movcc	r5, #12
 8001114:	2d00      	cmp	r5, #0
 8001116:	4606      	mov	r6, r0
 8001118:	db01      	blt.n	800111e <_malloc_r+0x1a>
 800111a:	42a9      	cmp	r1, r5
 800111c:	d903      	bls.n	8001126 <_malloc_r+0x22>
 800111e:	230c      	movs	r3, #12
 8001120:	6033      	str	r3, [r6, #0]
 8001122:	2000      	movs	r0, #0
 8001124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001126:	f000 f8f1 	bl	800130c <__malloc_lock>
 800112a:	4921      	ldr	r1, [pc, #132]	; (80011b0 <_malloc_r+0xac>)
 800112c:	680a      	ldr	r2, [r1, #0]
 800112e:	4614      	mov	r4, r2
 8001130:	b99c      	cbnz	r4, 800115a <_malloc_r+0x56>
 8001132:	4f20      	ldr	r7, [pc, #128]	; (80011b4 <_malloc_r+0xb0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b923      	cbnz	r3, 8001142 <_malloc_r+0x3e>
 8001138:	4621      	mov	r1, r4
 800113a:	4630      	mov	r0, r6
 800113c:	f000 f83c 	bl	80011b8 <_sbrk_r>
 8001140:	6038      	str	r0, [r7, #0]
 8001142:	4629      	mov	r1, r5
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f837 	bl	80011b8 <_sbrk_r>
 800114a:	1c43      	adds	r3, r0, #1
 800114c:	d123      	bne.n	8001196 <_malloc_r+0x92>
 800114e:	230c      	movs	r3, #12
 8001150:	6033      	str	r3, [r6, #0]
 8001152:	4630      	mov	r0, r6
 8001154:	f000 f8e0 	bl	8001318 <__malloc_unlock>
 8001158:	e7e3      	b.n	8001122 <_malloc_r+0x1e>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	1b5b      	subs	r3, r3, r5
 800115e:	d417      	bmi.n	8001190 <_malloc_r+0x8c>
 8001160:	2b0b      	cmp	r3, #11
 8001162:	d903      	bls.n	800116c <_malloc_r+0x68>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	441c      	add	r4, r3
 8001168:	6025      	str	r5, [r4, #0]
 800116a:	e004      	b.n	8001176 <_malloc_r+0x72>
 800116c:	6863      	ldr	r3, [r4, #4]
 800116e:	42a2      	cmp	r2, r4
 8001170:	bf0c      	ite	eq
 8001172:	600b      	streq	r3, [r1, #0]
 8001174:	6053      	strne	r3, [r2, #4]
 8001176:	4630      	mov	r0, r6
 8001178:	f000 f8ce 	bl	8001318 <__malloc_unlock>
 800117c:	f104 000b 	add.w	r0, r4, #11
 8001180:	1d23      	adds	r3, r4, #4
 8001182:	f020 0007 	bic.w	r0, r0, #7
 8001186:	1ac2      	subs	r2, r0, r3
 8001188:	d0cc      	beq.n	8001124 <_malloc_r+0x20>
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	50a3      	str	r3, [r4, r2]
 800118e:	e7c9      	b.n	8001124 <_malloc_r+0x20>
 8001190:	4622      	mov	r2, r4
 8001192:	6864      	ldr	r4, [r4, #4]
 8001194:	e7cc      	b.n	8001130 <_malloc_r+0x2c>
 8001196:	1cc4      	adds	r4, r0, #3
 8001198:	f024 0403 	bic.w	r4, r4, #3
 800119c:	42a0      	cmp	r0, r4
 800119e:	d0e3      	beq.n	8001168 <_malloc_r+0x64>
 80011a0:	1a21      	subs	r1, r4, r0
 80011a2:	4630      	mov	r0, r6
 80011a4:	f000 f808 	bl	80011b8 <_sbrk_r>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d1dd      	bne.n	8001168 <_malloc_r+0x64>
 80011ac:	e7cf      	b.n	800114e <_malloc_r+0x4a>
 80011ae:	bf00      	nop
 80011b0:	20000088 	.word	0x20000088
 80011b4:	2000008c 	.word	0x2000008c

080011b8 <_sbrk_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4d06      	ldr	r5, [pc, #24]	; (80011d4 <_sbrk_r+0x1c>)
 80011bc:	2300      	movs	r3, #0
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	f7ff fb6a 	bl	800089c <_sbrk>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_sbrk_r+0x1a>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_sbrk_r+0x1a>
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200000f0 	.word	0x200000f0

080011d8 <__sread>:
 80011d8:	b510      	push	{r4, lr}
 80011da:	460c      	mov	r4, r1
 80011dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e0:	f000 f8a0 	bl	8001324 <_read_r>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	bfab      	itete	ge
 80011e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011ea:	89a3      	ldrhlt	r3, [r4, #12]
 80011ec:	181b      	addge	r3, r3, r0
 80011ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011f2:	bfac      	ite	ge
 80011f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80011f6:	81a3      	strhlt	r3, [r4, #12]
 80011f8:	bd10      	pop	{r4, pc}

080011fa <__swrite>:
 80011fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fe:	461f      	mov	r7, r3
 8001200:	898b      	ldrh	r3, [r1, #12]
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	4605      	mov	r5, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4616      	mov	r6, r2
 800120a:	d505      	bpl.n	8001218 <__swrite+0x1e>
 800120c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001210:	2302      	movs	r3, #2
 8001212:	2200      	movs	r2, #0
 8001214:	f000 f868 	bl	80012e8 <_lseek_r>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800121e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001222:	81a3      	strh	r3, [r4, #12]
 8001224:	4632      	mov	r2, r6
 8001226:	463b      	mov	r3, r7
 8001228:	4628      	mov	r0, r5
 800122a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800122e:	f000 b817 	b.w	8001260 <_write_r>

08001232 <__sseek>:
 8001232:	b510      	push	{r4, lr}
 8001234:	460c      	mov	r4, r1
 8001236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800123a:	f000 f855 	bl	80012e8 <_lseek_r>
 800123e:	1c43      	adds	r3, r0, #1
 8001240:	89a3      	ldrh	r3, [r4, #12]
 8001242:	bf15      	itete	ne
 8001244:	6560      	strne	r0, [r4, #84]	; 0x54
 8001246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800124a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800124e:	81a3      	strheq	r3, [r4, #12]
 8001250:	bf18      	it	ne
 8001252:	81a3      	strhne	r3, [r4, #12]
 8001254:	bd10      	pop	{r4, pc}

08001256 <__sclose>:
 8001256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125a:	f000 b813 	b.w	8001284 <_close_r>
	...

08001260 <_write_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d07      	ldr	r5, [pc, #28]	; (8001280 <_write_r+0x20>)
 8001264:	4604      	mov	r4, r0
 8001266:	4608      	mov	r0, r1
 8001268:	4611      	mov	r1, r2
 800126a:	2200      	movs	r2, #0
 800126c:	602a      	str	r2, [r5, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff fac7 	bl	8000802 <_write>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_write_r+0x1e>
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	b103      	cbz	r3, 800127e <_write_r+0x1e>
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	200000f0 	.word	0x200000f0

08001284 <_close_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4d06      	ldr	r5, [pc, #24]	; (80012a0 <_close_r+0x1c>)
 8001288:	2300      	movs	r3, #0
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	f7ff fad3 	bl	800083a <_close>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_close_r+0x1a>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_close_r+0x1a>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200000f0 	.word	0x200000f0

080012a4 <_fstat_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d07      	ldr	r5, [pc, #28]	; (80012c4 <_fstat_r+0x20>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	f7ff facd 	bl	8000850 <_fstat>
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	d102      	bne.n	80012c0 <_fstat_r+0x1c>
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	b103      	cbz	r3, 80012c0 <_fstat_r+0x1c>
 80012be:	6023      	str	r3, [r4, #0]
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	bf00      	nop
 80012c4:	200000f0 	.word	0x200000f0

080012c8 <_isatty_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d06      	ldr	r5, [pc, #24]	; (80012e4 <_isatty_r+0x1c>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602b      	str	r3, [r5, #0]
 80012d4:	f7ff facb 	bl	800086e <_isatty>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_isatty_r+0x1a>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_isatty_r+0x1a>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	200000f0 	.word	0x200000f0

080012e8 <_lseek_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d07      	ldr	r5, [pc, #28]	; (8001308 <_lseek_r+0x20>)
 80012ec:	4604      	mov	r4, r0
 80012ee:	4608      	mov	r0, r1
 80012f0:	4611      	mov	r1, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	602a      	str	r2, [r5, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f7ff fac3 	bl	8000882 <_lseek>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	d102      	bne.n	8001306 <_lseek_r+0x1e>
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	b103      	cbz	r3, 8001306 <_lseek_r+0x1e>
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	bd38      	pop	{r3, r4, r5, pc}
 8001308:	200000f0 	.word	0x200000f0

0800130c <__malloc_lock>:
 800130c:	4801      	ldr	r0, [pc, #4]	; (8001314 <__malloc_lock+0x8>)
 800130e:	f7ff be45 	b.w	8000f9c <__retarget_lock_acquire_recursive>
 8001312:	bf00      	nop
 8001314:	200000e8 	.word	0x200000e8

08001318 <__malloc_unlock>:
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <__malloc_unlock+0x8>)
 800131a:	f7ff be40 	b.w	8000f9e <__retarget_lock_release_recursive>
 800131e:	bf00      	nop
 8001320:	200000e8 	.word	0x200000e8

08001324 <_read_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4d07      	ldr	r5, [pc, #28]	; (8001344 <_read_r+0x20>)
 8001328:	4604      	mov	r4, r0
 800132a:	4608      	mov	r0, r1
 800132c:	4611      	mov	r1, r2
 800132e:	2200      	movs	r2, #0
 8001330:	602a      	str	r2, [r5, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f7ff fa48 	bl	80007c8 <_read>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_read_r+0x1e>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_read_r+0x1e>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	200000f0 	.word	0x200000f0

08001348 <_init>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	bf00      	nop
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr

08001354 <_fini>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	bf00      	nop
 8001358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135a:	bc08      	pop	{r3}
 800135c:	469e      	mov	lr, r3
 800135e:	4770      	bx	lr
